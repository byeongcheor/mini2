/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.91
 * Generated at: 2024-11-13 04:47:38 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.board.calendar;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class cal_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(4);
    _jspx_dependants.put("jar:file:/C:/Users/ICT01-21/Desktop/miniProject%2009-09%2006.12/miniProject%2009-09%2006.12/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/miniProject2/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/layout/header.jspf", Long.valueOf(1725792806775L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1724403605343L));
    _jspx_dependants.put("/layout/footer.jspf", Long.valueOf(1725708625814L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fif_0026_005ftest;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>DANDI</title>\r\n");
      out.write("\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("<!-- 부트스트랩 -->\r\n");
      out.write("<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js\"></script>\r\n");
      out.write("<!-- 슬릭슬라이더 -->\r\n");
      out.write("<!-- 제이쿼리 -->\r\n");
      out.write("<script\r\n");
      out.write("   src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js\"></script>\r\n");
      out.write("<!--slick slider 필요 태그 st-->\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"//cdn.jsdelivr.net/npm/slick-carousel@1.8.1/slick/slick.css\"/>\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"//cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.5.8/slick-theme.min.css\">\r\n");
      out.write("<!-- jQuery CDN -->\r\n");
      out.write("<script src=\"//code.jquery.com/jquery-1.11.0.min.js\"></script>\r\n");
      out.write("<script src=\"//code.jquery.com/jquery-migrate-1.2.1.min.js\"></script>\r\n");
      out.write("<!-- slick Carousel CDN -->\r\n");
      out.write("<script type=\"text/javascript\" src=\"//cdn.jsdelivr.net/jquery.slick/1.5.7/slick.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<!--폰트-->\r\n");
      out.write("<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\r\n");
      out.write("<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/css2?family=Gothic+A1:wght@100;200;300;400;500;600;700;800;900&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\r\n");
      out.write("<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/css2?family=Gothic+A1:wght@100;200;300;400;500;600;700;800;900&family=Noto+Sans:ital,wght@0,100..900;1,100..900&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/mini/css/header.css\" type=\"text/css\"/>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("   $(document).ready(function(){\r\n");
      out.write("         $('.autoplay').slick({\r\n");
      out.write("            centerMode: true,\r\n");
      out.write("            slidesToShow: 4,\r\n");
      out.write("            slidesToScroll: 1,\r\n");
      out.write("            autoplay: true,\r\n");
      out.write("            autoplaySpeed: 2000,\r\n");
      out.write("           \r\n");
      out.write("            draggable:true ,\r\n");
      out.write("            infinite: true\r\n");
      out.write("         });\r\n");
      out.write("      \r\n");
      out.write("   });\r\n");
      out.write("   $(document).ready(function(){\r\n");
      out.write("      $('.center').slick({\r\n");
      out.write("         centerMode: true,\r\n");
      out.write("         centerPadding: '60px',\r\n");
      out.write("         slidesToShow: 5,\r\n");
      out.write("         autoplay: true,\r\n");
      out.write("         autoplaySpeed: 2000,\r\n");
      out.write("       \r\n");
      out.write("         draggable:true ,\r\n");
      out.write("         infinite: true,\r\n");
      out.write("         responsive: [\r\n");
      out.write("         {\r\n");
      out.write("            breakpoint: 768,\r\n");
      out.write("            settings: {\r\n");
      out.write("            arrows: false,\r\n");
      out.write("            centerMode: true,\r\n");
      out.write("            centerPadding: '40px',\r\n");
      out.write("            slidesToShow: 3\r\n");
      out.write("            }\r\n");
      out.write("         },\r\n");
      out.write("         {\r\n");
      out.write("            breakpoint: 480,\r\n");
      out.write("            settings: {\r\n");
      out.write("            arrows: false,\r\n");
      out.write("            centerMode: true,\r\n");
      out.write("            centerPadding: '40px',\r\n");
      out.write("            slidesToShow: 1\r\n");
      out.write("            }\r\n");
      out.write("         }\r\n");
      out.write("      ]\r\n");
      out.write("      });\r\n");
      out.write("   });\r\n");
      out.write("</script>\r\n");
      out.write("<script>\r\n");
      out.write("   $(function(){\r\n");
      out.write("          // 스크롤 시 header fade-in\r\n");
      out.write("          $(document).on('scroll', function(){\r\n");
      out.write("              if($(window).scrollTop() > 100){\r\n");
      out.write("                  $(\"#header\").removeClass(\"deactive\");\r\n");
      out.write("                  $(\"#header\").addClass(\"active\");\r\n");
      out.write("              }else{\r\n");
      out.write("                  $(\"#header\").removeClass(\"active\");\r\n");
      out.write("                  $(\"#header\").addClass(\"deactive\");\r\n");
      out.write("              }\r\n");
      out.write("          })\r\n");
      out.write("      \r\n");
      out.write("      });\r\n");
      out.write("   function openLoginPopup() {\r\n");
      out.write("       window.open('/mini/mypage/login', 'LoginPopup', 'width=465, height=525 ,left=1200, top=150');\r\n");
      out.write("   }\r\n");
      out.write("\r\n");
      out.write("   function joinPopup(){\r\n");
      out.write("       window.open('/mini/mypage/join', 'JoinPopup', 'width=530, height=930 ,left=1200, top=80');\r\n");
      out.write("   }\r\n");
      out.write("\r\n");
      out.write("   function findIdPopup(){\r\n");
      out.write("       window.open('/mini/mypage/findId', 'findIdPopup', 'width=465, height=525 ,left=1200, top=150');\r\n");
      out.write("   }\r\n");
      out.write("   function findPwdPopup(){\r\n");
      out.write("       window.open('/mini/mypage/findPwd', 'findPwdPopup', 'width=465, height=525 ,left=1200, top=150');\r\n");
      out.write("   }\r\n");
      out.write("   \r\n");
      out.write("   function loginClosed() {\r\n");
      out.write("       // 로그인 처리 로직\r\n");
      out.write("       // 예를 들어, resultVo를 통해 사용자 정보를 가져왔다고 가정합니다.\r\n");
      out.write("       const userId = resultVo.getUserid();\r\n");
      out.write("       const userName = resultVo.getUsername();\r\n");
      out.write("       \r\n");
      out.write("       // 세션에 로그인 상태 저장 (예시로 localStorage 사용)\r\n");
      out.write("       session.setAttribute(\"logId\", resultVo.getUserid());\r\n");
      out.write("      session.setAttribute(\"logName\", resultVo.getUsername());\r\n");
      out.write("      session.setAttribute(\"logStatus\", \"Y\");\r\n");
      out.write("      \r\n");
      out.write("\r\n");
      out.write("       // 메인 페이지의 로컬 스토리지 업데이트 및 로그인 상태 갱신\r\n");
      out.write("       if (window.opener && !window.opener.closed) {\r\n");
      out.write("           window.opener.updateLoginStatus(userId, userName);\r\n");
      out.write("       }\r\n");
      out.write("\r\n");
      out.write("       // 팝업 창 닫기\r\n");
      out.write("       window.close();\r\n");
      out.write("   }\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write(" ");

    Boolean excludeHeader = (Boolean) request.getAttribute("excludeHeader");

    if (excludeHeader == null || !excludeHeader) {

      out.write("\r\n");
      out.write("   <header>\r\n");
      out.write("       <div id=\"header\" class=\"deactive\">\r\n");
      out.write("         <h1 class=\"title\">\r\n");
      out.write("            <a href=\"/mini/\"><img src=\"/mini/images/main/logo.png\"></a>\r\n");
      out.write("         </h1>\r\n");
      out.write("         <!--검색창구현-->\r\n");
      out.write("         <nav>\r\n");
      out.write("            <ul>\r\n");
      out.write("               <li><a href=\"/mini/festival/festivalList\">Festival</a></li>\r\n");
      out.write("               <li><a href=\"/mini/rest/restList\">Food</a></li>\r\n");
      out.write("               <li><a href=\"/mini/course/courseList\">Course</a></li>\r\n");
      out.write("               <li><a href=\"/mini/calendar/cal\">Calendar</a></li>\r\n");
      out.write("\r\n");
      out.write("               ");
      if (_jspx_meth_c_005fif_005f0(_jspx_page_context))
        return;
      out.write("   \r\n");
      out.write("               ");
      if (_jspx_meth_c_005fif_005f1(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("            </ul>\r\n");
      out.write("         </nav>\r\n");
      out.write("      </div> \r\n");
      out.write("   </header>\r\n");

    }

      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/mini/css/cal.css\" type=\"text/css\"/>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Document</title>\r\n");
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("        let labels = [];\r\n");
      out.write("        let datas = [];\r\n");
      out.write("\r\n");
      out.write("        // 날씨 관련된 변수\r\n");
      out.write("        var weathertoday = new Date();\r\n");
      out.write("        var weatheryear = weathertoday.getFullYear();\r\n");
      out.write("        var weathermonth = weathertoday.getMonth() + 1;\r\n");
      out.write("        var weatherday = weathertoday.getDate();\r\n");
      out.write("        let weatherclosestTime = null;\r\n");
      out.write("        let weatherclosestDifference = Infinity;\r\n");
      out.write("        var weathernowdate = weatheryear + \"-\";\r\n");
      out.write("        if (weathermonth < 10) {\r\n");
      out.write("            weathermonth = \"0\" + weathermonth;\r\n");
      out.write("        }\r\n");
      out.write("        if (weatherday < 10) {\r\n");
      out.write("            weatherday = \"0\" + weatherday;\r\n");
      out.write("        }\r\n");
      out.write("        weathernowdate = weathernowdate + weathermonth + \"-\" + weatherday;\r\n");
      out.write("        const weathernowtime = Math.floor((Date.now() + 9 * 60 * 60 * 1000) / 1000);\r\n");
      out.write("        let max_temp = -100;\r\n");
      out.write("        let min_temp = 100;\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        // 달력 관련된 변수\r\n");
      out.write("        var now = new Date();  // 기본적으로 현재 날짜로 설정\r\n");
      out.write("        var year;\r\n");
      out.write("        var month;\r\n");
      out.write("        var rnow = new Date();\r\n");
      out.write("        var nowd = rnow.getDate();\r\n");
      out.write("        var nowm = rnow.getMonth() + 1;\r\n");
      out.write("        var nowy = rnow.getFullYear();\r\n");
      out.write("        console.log(nowd, nowm, nowy);\r\n");
      out.write("\r\n");
      out.write("        document.addEventListener('DOMContentLoaded', function() {\r\n");
      out.write("            loadWeatherData(); // 날씨 데이터를 먼저 로드\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        function loadWeatherData() {\r\n");
      out.write("            setTimeout(function() {\r\n");
      out.write("                var xHttp = new XMLHttpRequest();\r\n");
      out.write("\r\n");
      out.write("                xHttp.onreadystatechange = function() {\r\n");
      out.write("                    if (this.readyState == 4 && this.status == 200) {\r\n");
      out.write("                        let result = JSON.parse(this.responseText);\r\n");
      out.write("                       \r\n");
      out.write("                        labels = [];\r\n");
      out.write("                        datas = [];\r\n");
      out.write("                        let tempData = {}; // 날짜별로 temp_max, temp_min, icon을 저장\r\n");
      out.write("                        for (let i = 0; i < result.list.length; i++) {\r\n");
      out.write("                            let date = result.list[i].dt_txt.substring(0, 10); // \"YYYY-MM-DD\" 형식으로 날짜 추출\r\n");
      out.write("                            let weatherIcon = result.list[i].weather[0].icon;\r\n");
      out.write("						\r\n");
      out.write("                            if (!tempData[date]) {\r\n");
      out.write("                                tempData[date] = { \r\n");
      out.write("                                    max: -Infinity, \r\n");
      out.write("                                    min: Infinity, \r\n");
      out.write("                                    icon: weatherIcon, \r\n");
      out.write("                                    hasRain: false \r\n");
      out.write("                                };\r\n");
      out.write("                            }\r\n");
      out.write("\r\n");
      out.write("                            if (result.list[i].main.temp_max > tempData[date].max) {\r\n");
      out.write("                                tempData[date].max = result.list[i].main.temp_max;\r\n");
      out.write("                            }\r\n");
      out.write("                            if (result.list[i].main.temp_min < tempData[date].min) {\r\n");
      out.write("                                tempData[date].min = result.list[i].main.temp_min;\r\n");
      out.write("                            }\r\n");
      out.write("\r\n");
      out.write("                            if (weatherIcon.startsWith(\"09\") || weatherIcon.startsWith(\"10\")) {\r\n");
      out.write("                                tempData[date].hasRain = true;\r\n");
      out.write("                            }\r\n");
      out.write("\r\n");
      out.write("                            // 비오는 날씨가 한번이라도 나타나면 아이콘을 비오는 이미지로 설정\r\n");
      out.write("                            if (tempData[date].hasRain) {\r\n");
      out.write("                                tempData[date].icon = \"09n\"; // \"rain.png\"로 비오는 이미지 설정\r\n");
      out.write("                            }\r\n");
      out.write("                        }\r\n");
      out.write("\r\n");
      out.write("                        // 데이터를 labels와 datas 배열에 저장\r\n");
      out.write("                        for (let date in tempData) {\r\n");
      out.write("                            datas.push(tempData[date].icon);\r\n");
      out.write("                            labels.push(\"최고\"+Math.round(tempData[date].max) + \"°C <br/>최저\" + Math.round(tempData[date].min)  + \"°C\");\r\n");
      out.write("                        }\r\n");
      out.write("\r\n");
      out.write("                        \r\n");
      out.write("                        setDayView(); // 날씨 데이터 로드 후 달력 초기화\r\n");
      out.write("                    }\r\n");
      out.write("                };\r\n");
      out.write("                var url = \"https://api.openweathermap.org/data/2.5/forecast?lat=35.1796&lon=129.0756&appid=79908538f557fa6efd9c4f4b21907bca&lang=kr&units=metric\";\r\n");
      out.write("                xHttp.open(\"GET\", url, true);\r\n");
      out.write("                xHttp.send();\r\n");
      out.write("            }, 100);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function setDayView() {\r\n");
      out.write("            year = now.getFullYear();\r\n");
      out.write("            month = now.getMonth() + 1;  // getMonth()는 0부터 시작하므로 1을 더해줌\r\n");
      out.write("\r\n");
      out.write("            document.getElementById('yn').innerHTML = \r\n");
      out.write("                year + \"년 \" + month + \"월\" + \r\n");
      out.write("                \"<div><button onclick='prevMonth()'><img src='/mini/images/weather/leftbutton.png'></button>\" + \r\n");
      out.write("                \"<button onclick='nextMonth()'><img src='/mini/images/weather/rightbutton.png'/></button>\" + \r\n");
      out.write("                \"<button onclick='goNow()'><img src='/mini/images/weather/resetbutton.png'/></button></div>\";\r\n");
      out.write("\r\n");
      out.write("            var firstDayOfMonth = new Date(year, month - 1, 1);\r\n");
      out.write("            var week = firstDayOfMonth.getDay();\r\n");
      out.write("\r\n");
      out.write("            var lastDayOfMonth = new Date(year, month, 0).getDate();\r\n");
      out.write("\r\n");
      out.write("            var dayStr = \"\";\r\n");
      out.write("            var weekName = ['일', '월', '화', '수', '목', '금', '토'];\r\n");
      out.write("            for (var i = 0; i < weekName.length; i++) {\r\n");
      out.write("                dayStr += \"<li class='weekName'>\" + weekName[i] + \"</li>\";\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            for (var s = 0; s < week; s++) {\r\n");
      out.write("                dayStr += \"<li class='dayn'>&nbsp;</li>\";\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            for (var d = 1; d <= lastDayOfMonth; d++) {\r\n");
      out.write("                if (nowd == d && month == nowm && year == nowy) {\r\n");
      out.write("                    // 오늘 날짜\r\n");
      out.write("                    dayStr += \"<li class='nowday'><button onclick='test(\" + year + \",\" + month + \",\" + d +\",\"+datas[0].substring(0,2)+ \")'><div class='daynum' id=\" + year + \"-\" + month + \"-\" + d +\">\" + d + \"</div><div class='colorday'>\"+labels[0]+\"</div><div><img src='/mini/images/weather/\"+datas[0]+\".png'/></div></button></li>\";\r\n");
      out.write("                \r\n");
      out.write("                } else if (d > nowd && d <= nowd + 5 && month == nowm && year == nowy) {\r\n");
      out.write("                    // 오늘 이후 5일까지\r\n");
      out.write("                    var Index = d - nowd;  // labels 배열에서 오늘 이후의 날짜에 맞는 인덱스 계산\r\n");
      out.write("                    if (Index < labels.length) {  // 인덱스가 배열 범위를 초과하지 않도록 확인\r\n");
      out.write("                        dayStr += \"<li class='dayn'><button onclick='test(\" + year + \",\" + month + \",\" + d + \",\"+datas[Index].substring(0,2)+\")'><div class='daynum' id=\" + year + \"-\" + month + \"-\" + d +\">\" + d + \"</div><div class='colorday'>\"+labels[Index]+\"</div><div><img src='/mini/images/weather/\"+datas[Index]+\".png'/></div></div></button></li>\";\r\n");
      out.write("                    } else {\r\n");
      out.write("                        dayStr += \"<li class='dayn'><button onclick='test(\" + year + \",\" + month + \",\" + d + \")'><div class='daynum' id=\" + year + \"-\" + month + \"-\" + d +\">\" + d + \"</div></button></li>\";\r\n");
      out.write("                    }\r\n");
      out.write("\r\n");
      out.write("                } else if (d <= (nowd + 5 - lastDayOfMonth) && month == nowm + 1 && month <= 12) {\r\n");
      out.write("                    // 달이 다음 달로 넘어가는 경우\r\n");
      out.write("                    var Index = lastDayOfMonth - nowd + d;  // labels 배열에서 다음 달 날짜에 맞는 인덱스 계산\r\n");
      out.write("                    if (Index < labels.length) {  // 인덱스가 배열 범위를 초과하지 않도록 확인\r\n");
      out.write("                        dayStr += \"<li class='dayn'><button onclick='test(\" + year + \",\" + (month) + \",\" + d + \",\"+datas[Index].substring(0,2)+\")'><div class='daynum' id=\" + year + \"-\" + month + \"-\" + d +\">\" + d + \"</div><div class='colorday'>\"+labels[Index]+\"</div><div><img src='/mini/images/weather/\"+datas[Index]+\".png'/></div></button></li>\";\r\n");
      out.write("                    } else {\r\n");
      out.write("                        dayStr += \"<li class='dayn'><button onclick='test(\" + year + \",\" + (month) + \",\" + d + \")'><div class='daynum' id=\" + year + \"-\" + month + \"-\" + d +\">\" + d + \"</div></button></li>\";\r\n");
      out.write("                    }\r\n");
      out.write("\r\n");
      out.write("                } else {\r\n");
      out.write("                    // 그 외의 날짜\r\n");
      out.write("                    dayStr += \"<li class='dayn'><button onclick='test(\" + year + \",\" + month + \",\" + d + \")'><div class='daynum' id=\" + year + \"-\" + month + \"-\" + d +\">\" + d + \"</div></button></li>\";\r\n");
      out.write("                }\r\n");
      out.write("            }         \r\n");
      out.write("            console.log(labels);\r\n");
      out.write("            console.log(datas);\r\n");
      out.write("            document.getElementById(\"day\").innerHTML = dayStr;\r\n");
      out.write("        }\r\n");
      out.write("        let previousSelectedDay = null; \r\n");
      out.write("        function test(y, m, dnum,dataindex) {\r\n");
      out.write("        	let selectedDay2 = document.getElementById(y + \"-\" + m + \"-\" + dnum);  // 선택한 날짜의 요소 가져오기\r\n");
      out.write("        	let selectedDay = selectedDay2.parentNode;  // 선택한 날짜의 부모 요소 가져오기\r\n");
      out.write("			let bselctday=selectedDay.parentNode;\r\n");
      out.write("        \r\n");
      out.write("\r\n");
      out.write("        	if (previousSelectedDay !== null) {\r\n");
      out.write("        	    previousSelectedDay.style.color = '';  \r\n");
      out.write("        	    previousSelectedDay.style.backgroundColor = ''; \r\n");
      out.write("        	    previousSelectedDay.style.border='';\r\n");
      out.write("        	    previousSelectedDay.style.borderRadius='';\r\n");
      out.write("        	}\r\n");
      out.write("\r\n");
      out.write("        	selectedDay.style.setProperty('color', '#1E90FF', 'important');\r\n");
      out.write("        	selectedDay.style.backgroundColor = '#F0F8FF'; \r\n");
      out.write("        	selectedDay.style.border='1px solid #1E90FF';\r\n");
      out.write("        	selectedDay.style.borderRadius='10px';\r\n");
      out.write("        	\r\n");
      out.write("        	previousSelectedDay = selectedDay;\r\n");
      out.write("\r\n");
      out.write("            if (m < 10) {m = \"0\" + m;}\r\n");
      out.write("            if (dnum < 10){ dnum = \"0\" + dnum;}\r\n");
      out.write("            if(dataindex<10){dataindex=\"0\"+dataindex;}\r\n");
      out.write("         \r\n");
      out.write("    \r\n");
      out.write("         \r\n");
      out.write("            if(dataindex!=null && dataindex!=0){\r\n");
      out.write("            	if (dataindex==\"01\" || dataindex==\"02\" || dataindex==\"03\"){\r\n");
      out.write("            		console.log(\"out일때 나오는 창\");\r\n");
      out.write("	            	var date= y + \"-\" + m + \"-\" + dnum;\r\n");
      out.write("	            	var environment=\"out\";\r\n");
      out.write("	            	\r\n");
      out.write("	            	$.ajax({\r\n");
      out.write("	            		\r\n");
      out.write("	            		url:\"/mini/calendar/listView/\"+date+\"/\"+environment,\r\n");
      out.write("	            	\r\n");
      out.write("            		\r\n");
      out.write("						success:function(r){\r\n");
      out.write("						var tag = \"<div class='container'>\";\r\n");
      out.write("            			r.map(function (data,idx){\r\n");
      out.write("            				tag+=\"<div class='list'>\";\r\n");
      out.write("            				tag+=\"<a href='/mini/festival/festivalView/\"+data.no+\"'>\";\r\n");
      out.write("            				tag+=\"<img class='list_img' src='/mini/images/poster/\"+data.poster+\"'/>\";\r\n");
      out.write("            				tag+=\"<div class='list_detail'>\";\r\n");
      out.write("            				tag+=\"<h3 class='detail'>\"+data.title+\"</h3>\"\r\n");
      out.write("            				tag+=\"<p class='detail'>\"+data.start_date+\"~\"+data.end_date+\"</p>\";\r\n");
      out.write("            				tag+=\"<p class='detail'>\"+data.addrdetails+\"</p>\";\r\n");
      out.write("            				tag+=\"</div></a></div>\";\r\n");
      out.write("\r\n");
      out.write("            			}); \r\n");
      out.write("            			tag +=\"</div>\";\r\n");
      out.write("            			\r\n");
      out.write("            			$(\"#listView\").html(tag);\r\n");
      out.write("            	\r\n");
      out.write("            		},error:function(e){\r\n");
      out.write("            			console.log(e.responseText);\r\n");
      out.write("            		}\r\n");
      out.write("            		\r\n");
      out.write("            		\r\n");
      out.write("            	});\r\n");
      out.write("	            	\r\n");
      out.write("            	}else{\r\n");
      out.write("            		console.log(\"in일때 나오는 창\");\r\n");
      out.write("            		var date= y + \"-\" + m + \"-\" + dnum;\r\n");
      out.write("	            	var environment=\"in\";\r\n");
      out.write("	            	var tag = \"<div class='container'>\";\r\n");
      out.write("	            	$.ajax({\r\n");
      out.write("	            		url:\"/mini/calendar/listView/\"+date+\"/\"+environment,\r\n");
      out.write("	            	\r\n");
      out.write("            		\r\n");
      out.write("						success:function(r){\r\n");
      out.write("            			r.map(function (data,idx){\r\n");
      out.write("            				tag+=\"<div class='list'>\";\r\n");
      out.write("            				tag+=\"<a href='/mini/festival/festivalView/\"+data.no+\"'>\";\r\n");
      out.write("            				tag+=\"<img class='list_img' src='/mini/images/poster/\"+data.poster+\"'/>\";\r\n");
      out.write("            				tag+=\"<div class='list_detail'>\";\r\n");
      out.write("            				tag+=\"<h3 class='detail'>\"+data.title+\"</h3>\"\r\n");
      out.write("            				tag+=\"<p class='detail'>\"+data.start_date+\"~\"+data.end_date+\"</p>\";\r\n");
      out.write("            				tag+=\"<p class='detail'>\"+data.addrdetails+\"</p>\";\r\n");
      out.write("            				tag+=\"</div></a></div>\";\r\n");
      out.write("\r\n");
      out.write("            			});\r\n");
      out.write("            			tag +=\"</div>\";\r\n");
      out.write("            			\r\n");
      out.write("            			$(\"#listView\").html(tag);\r\n");
      out.write("            	\r\n");
      out.write("            		},error:function(e){\r\n");
      out.write("            			console.log(e.responseText);\r\n");
      out.write("            		}\r\n");
      out.write("            		\r\n");
      out.write("            		\r\n");
      out.write("            	});\r\n");
      out.write("	            	\r\n");
      out.write("            	}\r\n");
      out.write("            }else{\r\n");
      out.write("            \r\n");
      out.write("            	var date= y + \"-\" + m + \"-\" + dnum;\r\n");
      out.write("            	var tag = \"<div class='container'>\";\r\n");
      out.write("            	$.ajax({\r\n");
      out.write("            		url:\"/mini/calendar/listView/\"+date,\r\n");
      out.write("            		success:function(r){	\r\n");
      out.write("            			r.map(function (data,idx){\r\n");
      out.write("            				tag+=\"<div class='list'>\";\r\n");
      out.write("            				tag+=\"<a href='/mini/festival/festivalView/\"+data.no+\"'>\";\r\n");
      out.write("            				tag+=\"<img class='list_img' src='/mini/images/poster/\"+data.poster+\"'/>\";\r\n");
      out.write("            				tag+=\"<div class='list_detail'>\";\r\n");
      out.write("            				tag+=\"<h3 class='detail'>\"+data.title+\"</h3>\"\r\n");
      out.write("            				tag+=\"<p class='detail'>\"+data.start_date+\"~\"+data.end_date+\"</p>\";\r\n");
      out.write("            				tag+=\"<p class='detail'>\"+data.addrdetails+\"</p>\";\r\n");
      out.write("            				tag+=\"</div></a></div>\";\r\n");
      out.write("\r\n");
      out.write("            			});\r\n");
      out.write("            			tag +=\"</div>\";\r\n");
      out.write("            			\r\n");
      out.write("            			$(\"#listView\").html(tag);\r\n");
      out.write("            	\r\n");
      out.write("            		},error:function(e){\r\n");
      out.write("            			console.log(e.responseText);\r\n");
      out.write("            		}\r\n");
      out.write("            		\r\n");
      out.write("            		\r\n");
      out.write("            	});\r\n");
      out.write("\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function nextMonth() {\r\n");
      out.write("            now.setMonth(now.getMonth() + 1); // 월을 1 증가시킴\r\n");
      out.write("            setDayView(); // 새로운 월에 대해 달력을 다시 그림\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function prevMonth() {\r\n");
      out.write("            now.setMonth(now.getMonth() - 1); // 월을 1 감소시킴\r\n");
      out.write("            setDayView(); // 새로운 월에 대해 달력을 다시 그림\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function goNow() {\r\n");
      out.write("            now = new Date(nowy, nowm - 1, nowd);\r\n");
      out.write("            setDayView();\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("       \r\n");
      out.write("    </script>\r\n");
      out.write("</head>\r\n");
      out.write("<!-- 상단이미지 -->\r\n");
      out.write("<div id=\"imgBox1\">\r\n");
      out.write("   <img src=\"/mini/images/cal/달력2.jpg\" id=\"imgContent1\" />\r\n");
      out.write("</div>\r\n");
      out.write("<div id=\"calendar\">\r\n");
      out.write("    <div id=\"dateView\">\r\n");
      out.write("        <div id=\"pagename\"><h3>월별축제달력</h3></div>\r\n");
      out.write("        <div id=\"yn\"></div>\r\n");
      out.write("        <div id=\"calView\">\r\n");
      out.write("            <div id='days'>\r\n");
      out.write("                <ul id=\"day\">\r\n");
      out.write("                    <li></li>\r\n");
      out.write("                </ul>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("  \r\n");
      out.write("</div>\r\n");
      out.write("<div id=\"listView\">\r\n");
      out.write("  \r\n");
      out.write(" </div>\r\n");
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/mini/css/footer.css\" type=\"text/css\"/>\r\n");

    Boolean excludeFooter = (Boolean) request.getAttribute("excludeFooter");
    if (excludeFooter == null || !excludeFooter) {

      out.write("\r\n");
      out.write("  \r\n");
      out.write("\r\n");
      out.write("   <footer>\r\n");
      out.write("      <div class=\"inner\">\r\n");
      out.write("        <div class=\"footer-message\">부산의 축제와 맛집을 소개하는 웹사이트</div>\r\n");
      out.write("        <div class=\"footer-contact\">컨택: ict@google.com</div>\r\n");
      out.write("        <div class=\"footer-copyright\">Copyright 2024 All ⓒ rights reserved</div>\r\n");
      out.write("      </div>\r\n");
      out.write("    </footer>\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>\r\n");

    }

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fif_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f0 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f0_reused = false;
    try {
      _jspx_th_c_005fif_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f0.setParent(null);
      // /layout/header.jspf(157,15) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${logStatus != 'Y'}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f0 = _jspx_th_c_005fif_005f0.doStartTag();
      if (_jspx_eval_c_005fif_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("                   <li class=\"lo\"><a onclick=\"openLoginPopup()\"><img src=\"/mini/images/main/unjoin.png\" style=\"width:60px; height:60px;\"/></a></li>\r\n");
          out.write("               ");
          int evalDoAfterBody = _jspx_th_c_005fif_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f0);
      _jspx_th_c_005fif_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fif_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f1 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f1_reused = false;
    try {
      _jspx_th_c_005fif_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f1.setParent(null);
      // /layout/header.jspf(160,15) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f1.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${logStatus == 'Y'}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f1 = _jspx_th_c_005fif_005f1.doStartTag();
      if (_jspx_eval_c_005fif_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("                   <li class=\"lo\"><a href=\"/mini/mypage/mypage\"><img src=\"/mini/images/main/join.png\" style=\"width:60px; height:60px;\"/></a></li>\r\n");
          out.write("               ");
          int evalDoAfterBody = _jspx_th_c_005fif_005f1.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f1);
      _jspx_th_c_005fif_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f1_reused);
    }
    return false;
  }
}
