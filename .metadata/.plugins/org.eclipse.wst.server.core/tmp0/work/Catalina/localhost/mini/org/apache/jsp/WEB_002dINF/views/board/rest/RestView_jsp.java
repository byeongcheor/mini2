/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.91
 * Generated at: 2024-09-09 09:03:52 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.board.rest;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class RestView_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(4);
    _jspx_dependants.put("/layout/header.jspf", Long.valueOf(1725792806775L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1724403605343L));
    _jspx_dependants.put("jar:file:/C:/Users/ICT01-21/Desktop/miniProject%2009-03/miniProject%2009-08pm08.24/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/miniProject2/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/layout/footer.jspf", Long.valueOf(1725708625814L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fif_0026_005ftest;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.release();
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>DANDI</title>\r\n");
      out.write("\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("<!-- 부트스트랩 -->\r\n");
      out.write("<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js\"></script>\r\n");
      out.write("<!-- 슬릭슬라이더 -->\r\n");
      out.write("<!-- 제이쿼리 -->\r\n");
      out.write("<script\r\n");
      out.write("   src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js\"></script>\r\n");
      out.write("<!--slick slider 필요 태그 st-->\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"//cdn.jsdelivr.net/npm/slick-carousel@1.8.1/slick/slick.css\"/>\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"//cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.5.8/slick-theme.min.css\">\r\n");
      out.write("<!-- jQuery CDN -->\r\n");
      out.write("<script src=\"//code.jquery.com/jquery-1.11.0.min.js\"></script>\r\n");
      out.write("<script src=\"//code.jquery.com/jquery-migrate-1.2.1.min.js\"></script>\r\n");
      out.write("<!-- slick Carousel CDN -->\r\n");
      out.write("<script type=\"text/javascript\" src=\"//cdn.jsdelivr.net/jquery.slick/1.5.7/slick.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<!--폰트-->\r\n");
      out.write("<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\r\n");
      out.write("<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/css2?family=Gothic+A1:wght@100;200;300;400;500;600;700;800;900&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\r\n");
      out.write("<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/css2?family=Gothic+A1:wght@100;200;300;400;500;600;700;800;900&family=Noto+Sans:ital,wght@0,100..900;1,100..900&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/mini/css/header.css\" type=\"text/css\"/>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("   $(document).ready(function(){\r\n");
      out.write("         $('.autoplay').slick({\r\n");
      out.write("            centerMode: true,\r\n");
      out.write("            slidesToShow: 4,\r\n");
      out.write("            slidesToScroll: 1,\r\n");
      out.write("            autoplay: true,\r\n");
      out.write("            autoplaySpeed: 2000,\r\n");
      out.write("           \r\n");
      out.write("            draggable:true ,\r\n");
      out.write("            infinite: true\r\n");
      out.write("         });\r\n");
      out.write("      \r\n");
      out.write("   });\r\n");
      out.write("   $(document).ready(function(){\r\n");
      out.write("      $('.center').slick({\r\n");
      out.write("         centerMode: true,\r\n");
      out.write("         centerPadding: '60px',\r\n");
      out.write("         slidesToShow: 5,\r\n");
      out.write("         autoplay: true,\r\n");
      out.write("         autoplaySpeed: 2000,\r\n");
      out.write("       \r\n");
      out.write("         draggable:true ,\r\n");
      out.write("         infinite: true,\r\n");
      out.write("         responsive: [\r\n");
      out.write("         {\r\n");
      out.write("            breakpoint: 768,\r\n");
      out.write("            settings: {\r\n");
      out.write("            arrows: false,\r\n");
      out.write("            centerMode: true,\r\n");
      out.write("            centerPadding: '40px',\r\n");
      out.write("            slidesToShow: 3\r\n");
      out.write("            }\r\n");
      out.write("         },\r\n");
      out.write("         {\r\n");
      out.write("            breakpoint: 480,\r\n");
      out.write("            settings: {\r\n");
      out.write("            arrows: false,\r\n");
      out.write("            centerMode: true,\r\n");
      out.write("            centerPadding: '40px',\r\n");
      out.write("            slidesToShow: 1\r\n");
      out.write("            }\r\n");
      out.write("         }\r\n");
      out.write("      ]\r\n");
      out.write("      });\r\n");
      out.write("   });\r\n");
      out.write("</script>\r\n");
      out.write("<script>\r\n");
      out.write("   $(function(){\r\n");
      out.write("          // 스크롤 시 header fade-in\r\n");
      out.write("          $(document).on('scroll', function(){\r\n");
      out.write("              if($(window).scrollTop() > 100){\r\n");
      out.write("                  $(\"#header\").removeClass(\"deactive\");\r\n");
      out.write("                  $(\"#header\").addClass(\"active\");\r\n");
      out.write("              }else{\r\n");
      out.write("                  $(\"#header\").removeClass(\"active\");\r\n");
      out.write("                  $(\"#header\").addClass(\"deactive\");\r\n");
      out.write("              }\r\n");
      out.write("          })\r\n");
      out.write("      \r\n");
      out.write("      });\r\n");
      out.write("   function openLoginPopup() {\r\n");
      out.write("       window.open('/mini/mypage/login', 'LoginPopup', 'width=465, height=525 ,left=1200, top=150');\r\n");
      out.write("   }\r\n");
      out.write("\r\n");
      out.write("   function joinPopup(){\r\n");
      out.write("       window.open('/mini/mypage/join', 'JoinPopup', 'width=530, height=930 ,left=1200, top=80');\r\n");
      out.write("   }\r\n");
      out.write("\r\n");
      out.write("   function findIdPopup(){\r\n");
      out.write("       window.open('/mini/mypage/findId', 'findIdPopup', 'width=465, height=525 ,left=1200, top=150');\r\n");
      out.write("   }\r\n");
      out.write("   function findPwdPopup(){\r\n");
      out.write("       window.open('/mini/mypage/findPwd', 'findPwdPopup', 'width=465, height=525 ,left=1200, top=150');\r\n");
      out.write("   }\r\n");
      out.write("   \r\n");
      out.write("   function loginClosed() {\r\n");
      out.write("       // 로그인 처리 로직\r\n");
      out.write("       // 예를 들어, resultVo를 통해 사용자 정보를 가져왔다고 가정합니다.\r\n");
      out.write("       const userId = resultVo.getUserid();\r\n");
      out.write("       const userName = resultVo.getUsername();\r\n");
      out.write("       \r\n");
      out.write("       // 세션에 로그인 상태 저장 (예시로 localStorage 사용)\r\n");
      out.write("       session.setAttribute(\"logId\", resultVo.getUserid());\r\n");
      out.write("      session.setAttribute(\"logName\", resultVo.getUsername());\r\n");
      out.write("      session.setAttribute(\"logStatus\", \"Y\");\r\n");
      out.write("      \r\n");
      out.write("\r\n");
      out.write("       // 메인 페이지의 로컬 스토리지 업데이트 및 로그인 상태 갱신\r\n");
      out.write("       if (window.opener && !window.opener.closed) {\r\n");
      out.write("           window.opener.updateLoginStatus(userId, userName);\r\n");
      out.write("       }\r\n");
      out.write("\r\n");
      out.write("       // 팝업 창 닫기\r\n");
      out.write("       window.close();\r\n");
      out.write("   }\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write(" ");

    Boolean excludeHeader = (Boolean) request.getAttribute("excludeHeader");

    if (excludeHeader == null || !excludeHeader) {

      out.write("\r\n");
      out.write("   <header>\r\n");
      out.write("       <div id=\"header\" class=\"deactive\">\r\n");
      out.write("         <h1 class=\"title\">\r\n");
      out.write("            <a href=\"/mini/\"><img src=\"/mini/images/main/logo.png\"></a>\r\n");
      out.write("         </h1>\r\n");
      out.write("         <!--검색창구현-->\r\n");
      out.write("         <nav>\r\n");
      out.write("            <ul>\r\n");
      out.write("               <li><a href=\"/mini/festival/festivalList\">Festival</a></li>\r\n");
      out.write("               <li><a href=\"/mini/rest/restList\">Food</a></li>\r\n");
      out.write("               <li><a href=\"/mini/course/courseList\">Course</a></li>\r\n");
      out.write("               <li><a href=\"/mini/calendar/cal\">Calendar</a></li>\r\n");
      out.write("\r\n");
      out.write("               ");
      if (_jspx_meth_c_005fif_005f0(_jspx_page_context))
        return;
      out.write("   \r\n");
      out.write("               ");
      if (_jspx_meth_c_005fif_005f1(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("            </ul>\r\n");
      out.write("         </nav>\r\n");
      out.write("      </div> \r\n");
      out.write("   </header>\r\n");

    }

      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script src=\"https://kit.fontawesome.com/5736c47827.js\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("<script src=\"https://dapi.kakao.com/v2/maps/sdk.js?appkey=b45e962e5c780aecefa8a8cae0f46328&autoload=false\"></script>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/mini/css/food.css\" type=\"text/css\"/>\r\n");
      out.write("<title>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${restView.store_name}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(" : 음식 | 상세 정보</title>\r\n");
      out.write("<script>\r\n");
      out.write("document.addEventListener('DOMContentLoaded', function() {\r\n");
      out.write("    const stars = document.querySelectorAll('.star');\r\n");
      out.write("    const selectedRatingInput = document.getElementById('selectedRating');\r\n");
      out.write("    const reviewForm = document.getElementById('reviewForm');\r\n");
      out.write("\r\n");
      out.write(" // 별점 클릭 이벤트\r\n");
      out.write("    $('.rating .star').on('click', function() {\r\n");
      out.write("        var ratingValue = $(this).data('value');\r\n");
      out.write("        $('#selectedRating').val(ratingValue);  // 선택한 별점 값을 hidden input에 저장\r\n");
      out.write("\r\n");
      out.write("        // 모든 별점 선택 해제 후 선택한 별점까지 선택 표시\r\n");
      out.write("        $('.rating .star').removeClass('selected');\r\n");
      out.write("        $(this).addClass('selected');\r\n");
      out.write("        $(this).prevAll().addClass('selected');  // 이전 별들에도 선택 표시\r\n");
      out.write("    });\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("\r\n");
      out.write("    // 리뷰 제출 버튼 클릭 시 폼 제출\r\n");
      out.write("    const reviewSubmitButton = document.querySelector('.review_submit');\r\n");
      out.write("    if (reviewSubmitButton) {\r\n");
      out.write("        reviewSubmitButton.addEventListener('click', function(event) {\r\n");
      out.write("            if (selectedRatingInput.value === '') {\r\n");
      out.write("                alert('별점을 선택해 주세요.');\r\n");
      out.write("                event.preventDefault(); // 별점을 선택하지 않으면 폼 제출 방지\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    $(document).on('click', '.like-icon', function() {\r\n");
      out.write("        var rest_code = $(this).data('rest-code');\r\n");
      out.write("        var userid = '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${logId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("';  // 사용자 ID (서버에서 렌더링된 값)\r\n");
      out.write("\r\n");
      out.write("        if (!userid) {\r\n");
      out.write("            alert('로그인이 필요합니다.');\r\n");
      out.write("            return;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        $.ajax({\r\n");
      out.write("            url: `/mini/rest/restView/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${rest_code}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/Togglelikes`,\r\n");
      out.write("            type: 'POST',\r\n");
      out.write("            data: { rest_code: rest_code, userid: userid },\r\n");
      out.write("            success: function(response) {\r\n");
      out.write("                if (response.error) {\r\n");
      out.write("                    alert(response.error);\r\n");
      out.write("                } else {\r\n");
      out.write("                    var icon = $(`.like-icon[data-rest-code=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${rest_code}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"]`);\r\n");
      out.write("                    icon.text(response.likes ? '♥(조아용)' : '♡(좋아요)'); // 좋아요 상태 업데이트\r\n");
      out.write("                    \r\n");
      out.write("                    // 좋아요 상태에 따라 텍스트 색상 변경\r\n");
      out.write("                    if (response.likes) {\r\n");
      out.write("                        icon.css('color', 'red');  // 좋아요 눌렀을 때 빨간색\r\n");
      out.write("                    } else {\r\n");
      out.write("                        icon.css('color', 'black');  // 좋아요 취소 시 검정색\r\n");
      out.write("                    }\r\n");
      out.write("                    \r\n");
      out.write("                    $('#like-count').text(response.likeCount); // 좋아요 수 업데이트\r\n");
      out.write("                }\r\n");
      out.write("            },\r\n");
      out.write("            error: function(error) {\r\n");
      out.write("                console.error('에러 발생:', error);\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    $(document).ready(function() {\r\n");
      out.write("        var userId = '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${logId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("';  // 사용자 ID (서버에서 렌더링된 값)\r\n");
      out.write("\r\n");
      out.write("        if (userId) {\r\n");
      out.write("            $.ajax({\r\n");
      out.write("                url: `/mini/rest/restView/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${restView.rest_code}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/mylikes`,\r\n");
      out.write("                type: 'GET',\r\n");
      out.write("                data: { userId: userId },\r\n");
      out.write("                success: function(result) {\r\n");
      out.write("                    if (result.error) {\r\n");
      out.write("                        console.error(result.error);\r\n");
      out.write("                    } else {\r\n");
      out.write("                        var likedRestCodes = result.likes;\r\n");
      out.write("                        $('.like-icon').each(function() {\r\n");
      out.write("                            var restCode = $(this).data('rest-code');\r\n");
      out.write("                            var isLiked = likedRestCodes.includes(restCode);\r\n");
      out.write("\r\n");
      out.write("                            $(this).text(isLiked ? '♥(조아요)' : '♡(좋아요)');\r\n");
      out.write("                            \r\n");
      out.write("                            // 초기 좋아요 상태에 따라 색상 설정\r\n");
      out.write("                            $(this).css('color', isLiked ? 'red' : 'black');\r\n");
      out.write("                        });\r\n");
      out.write("                    }\r\n");
      out.write("                },\r\n");
      out.write("                error: function(error) {\r\n");
      out.write("                    console.error('에러 발생:', error);\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    // 리뷰 목록 불러오기\r\n");
      out.write("    function reviewList() {\r\n");
      out.write("        $.ajax({\r\n");
      out.write("            url: `/mini/rest/restView/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${restView.rest_code}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/reviewList`,\r\n");
      out.write("            type: 'GET',\r\n");
      out.write("            success: function(result) {\r\n");
      out.write("                var reviewTag = \"\";\r\n");
      out.write("                $(result).each(function(idx, rVO) {\r\n");
      out.write("                    reviewTag += `\r\n");
      out.write("                        <div class=\"review-item\">\r\n");
      out.write("                            <div class=\"review-content\">\r\n");
      out.write("                                <b>`+rVO.userid+`</b> (`+rVO.writedate+`)\r\n");
      out.write("                                <p>`+rVO.contents+`</p>`;\r\n");
      out.write("\r\n");
      out.write("                                var logId = '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${logId}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("'\r\n");
      out.write("                                if (rVO.userid === logId || logId === 'root' ) {\r\n");
      out.write("                        reviewTag += `\r\n");
      out.write("                            <input type='button' value='수정' class='btn btn-outline-secondary' data-review-no='`+rVO.review_no+`'/>\r\n");
      out.write("                            <input type='button' value='삭제' class='btn btn-outline-danger' data-review-no='`+rVO.review_no+`'/>`;\r\n");
      out.write("                        reviewTag += `\r\n");
      out.write("                            </div>\r\n");
      out.write("                            <div class='edit-form' data-review-no='`+rVO.review_no+`' style='display:none;'>\r\n");
      out.write("                            <form class=\"edit-review-form\" method=\"post\" action=\"/mini/rest/restView/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${restView.rest_code}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/edit\">\r\n");
      out.write("                                    <textarea name='contents' id='contents`+rVO.review_no+`' style=\"width: 500px;\">`+rVO.contents+`</textarea>\r\n");
      out.write("                                    <input type='hidden' name='review_no' value='`+rVO.review_no+`'/>\r\n");
      out.write("                                    <input type='submit' value='댓글수정하기'/>\r\n");
      out.write("                                </form>\r\n");
      out.write("                            </div><hr/>`;\r\n");
      out.write("                    } else {\r\n");
      out.write("                        reviewTag += `</div><hr/>`;\r\n");
      out.write("                    }\r\n");
      out.write("                });\r\n");
      out.write("                $(\".reviewList\").html(reviewTag);\r\n");
      out.write("            },\r\n");
      out.write("            error: function(error) {\r\n");
      out.write("                console.log(error.responseText);\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // 리뷰 등록\r\n");
      out.write("   $('#reviewForm').on('submit', function(e) {\r\n");
      out.write("    e.preventDefault();  // 폼의 기본 제출 방지\r\n");
      out.write("    \r\n");
      out.write("    $.ajax({\r\n");
      out.write("        type: 'POST',\r\n");
      out.write("        url: `/mini/rest/restView/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${restView.rest_code}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/ReviewOk`,\r\n");
      out.write("        data: $(this).serialize(),  // 폼 데이터를 직렬화하여 전송\r\n");
      out.write("        success: function(result) {\r\n");
      out.write("            if (result === '1') {\r\n");
      out.write("                alert('리뷰가 성공적으로 등록되었습니다.');\r\n");
      out.write("                $('#contents').val('');\r\n");
      out.write("                $('#selectedRating').val('');  // 숨겨진 별점 값 초기화\r\n");
      out.write("                $('.rating .star').removeClass('selected');  // 모든 별점 선택 해제\r\n");
      out.write("                reviewList();  // 리뷰 목록 갱신\r\n");
      out.write("            } else {\r\n");
      out.write("                alert('리뷰 등록에 실패하였습니다.');\r\n");
      out.write("            }\r\n");
      out.write("        },\r\n");
      out.write("        error: function(error) {\r\n");
      out.write("            console.log(error.responseText);\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("// 수정 버튼 클릭 시 수정 폼 표시\r\n");
      out.write("   $(document).on('click', '.btn-outline-secondary', function() {\r\n");
      out.write("\r\n");
      out.write("       $('.edit-form').hide();\r\n");
      out.write("\r\n");
      out.write("       var review_no = $(this).data('review-no');\r\n");
      out.write("\r\n");
      out.write("       $(`.edit-form[data-review-no=\"` + review_no + `\"]`).show();\r\n");
      out.write("   });\r\n");
      out.write("\r\n");
      out.write("   // 리뷰 수정\r\n");
      out.write("   $(document).on('submit', '.edit-review-form', function(event) {\r\n");
      out.write("       event.preventDefault();  \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("       var params = $(this).serialize();\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("       $.ajax({\r\n");
      out.write("           type: 'POST',\r\n");
      out.write("           url: `/mini/rest/restView/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${restView.rest_code}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/edit`,\r\n");
      out.write("           data: params,  \r\n");
      out.write("           success: function(result) {\r\n");
      out.write("               if (result === '1') {\r\n");
      out.write("                   alert('리뷰가 성공적으로 수정되었습니다.');\r\n");
      out.write("                   reviewList();  \r\n");
      out.write("               } else {\r\n");
      out.write("                   alert('리뷰 수정에 실패하였습니다.');\r\n");
      out.write("               }\r\n");
      out.write("           },\r\n");
      out.write("           error: function(error) {\r\n");
      out.write("               console.log(error.responseText);\r\n");
      out.write("           }\r\n");
      out.write("       });\r\n");
      out.write("   });\r\n");
      out.write("\r\n");
      out.write(" // 리뷰 삭제하기\r\n");
      out.write("    $(document).on(\"click\", \".btn-outline-danger\", function() {\r\n");
      out.write("        if (confirm(\"리뷰를 삭제하시겠습니까?\")) {\r\n");
      out.write("            var review_no = $(this).data('review-no');\r\n");
      out.write("            $.ajax({\r\n");
      out.write("               type : 'get',\r\n");
      out.write("                url: `/mini/rest/restView/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${restView.rest_code}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/del`,\r\n");
      out.write("                data: { review_no: review_no },\r\n");
      out.write("                success: function(result) {\r\n");
      out.write("                    if (result === '0') {\r\n");
      out.write("                        alert(\"삭제 실패하였습니다.\");\r\n");
      out.write("                    } else {\r\n");
      out.write("                       alert(\"리뷰가 삭제 되었습니다.\");\r\n");
      out.write("                        reviewList();\r\n");
      out.write("                    }\r\n");
      out.write("                },\r\n");
      out.write("                error: function(error) {\r\n");
      out.write("                    console.log(error.responseText);\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    reviewList();\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write(" <!-- 상단이미지 -->\r\n");
      out.write("   <div id=\"imgBox1\">\r\n");
      out.write("      <img src=\"/mini/images/Food/야시장.jpg\" id=\"imgContent1\" />\r\n");
      out.write("   </div>\r\n");
      out.write("<header class=\"header\">\r\n");
      out.write("      <h2>📌음식점 상세보기</h2>\r\n");
      out.write("        <img src=\"/mini/images/Food/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${restView.imageurl}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" alt=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${restView.store_name}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(" Image\" class=\"header-img\"/>\r\n");
      out.write("        <h1 class=\"store-name\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${restView.store_name}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</h1>\r\n");
      out.write("        <span class=\"status\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${isOpen}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</span>\r\n");
      out.write("    </header>\r\n");
      out.write("<!-- 주소 , 전화번호, 대표메뉴, 카테고리 영역  -->\r\n");
      out.write("    <section class=\"details\">\r\n");
      out.write("        <div class=\"detail-item\">\r\n");
      out.write("            <i class=\"fa-solid fa-location-arrow\"> 주소 </i>\r\n");
      out.write("            <p>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${restView.addr}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</p>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"detail-item\">\r\n");
      out.write("            <i class=\"fa-solid fa-headset\"> 문의 및 안내 </i>\r\n");
      out.write("            <p>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${restView.tel}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</p>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"detail-item\">\r\n");
      out.write("            <i class=\"fa-solid fa-utensils\"> 대표메뉴 </i>\r\n");
      out.write("            <p> ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${restView.repMenu}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</p>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"detail-item\">\r\n");
      out.write("            <i class=\"fa-solid fa-list\"> 카테고리 </i>\r\n");
      out.write("            <p>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${restView.category}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</p>\r\n");
      out.write("        </div>\r\n");
      out.write("      <div class=\"detail-item\">\r\n");
      out.write("    <i class=\"fa-solid fa-thumbs-up like-icon\" data-rest-code=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${restView.rest_code}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"> 좋아요 </i>\r\n");
      out.write("    <p id=\"like-count\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${updatedLikeCount}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</p>\r\n");
      out.write("</div>\r\n");
      out.write("      <div class=\"detail-item\">\r\n");
      out.write("            <i class=\"fa-solid fa-list\"> 별점 </i>\r\n");
      out.write("            <p>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${averageRating}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</p>\r\n");
      out.write("        </div>\r\n");
      out.write("    </section>\r\n");
      out.write("\r\n");
      out.write("<!-- 영업시간  -->\r\n");
      out.write("    <section class=\"hours\">\r\n");
      out.write("        <h2>영업시간</h2>\r\n");
      out.write("        <p>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${restView.opentime}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</p>\r\n");
      out.write("    </section>\r\n");
      out.write("<!-- 메뉴 리스트  -->\r\n");
      out.write("    <section class=\"menu-list\">\r\n");
      out.write("        <h2>메뉴 리스트</h2>\r\n");
      out.write("        <p>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${restView.menu1}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</p>\r\n");
      out.write("    </section>\r\n");
      out.write("<!-- 가게 사진 목록  -->\r\n");
      out.write("    <section class=\"photos\">\r\n");
      out.write("        <h2>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${restView.store_name}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("의 사진</h2>\r\n");
      out.write("        <div class=\"photos-gallery\">\r\n");
      out.write("            <img src=\"/mini/images/Food/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${restView.imageurl1}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" alt=\"Photo 1\"/>\r\n");
      out.write("            <img src=\"/mini/images/Food/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${restView.imageurl2}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" alt=\"Photo 2\"/>\r\n");
      out.write("            <img src=\"/mini/images/Food/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${restView.imageurl3}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" alt=\"Photo 3\"/>\r\n");
      out.write("        </div>\r\n");
      out.write("    </section>\r\n");
      out.write("<!-- 가게 상세 내용  -->\r\n");
      out.write("    <section class=\"explanation\">\r\n");
      out.write("        <h2>상세 설명</h2>\r\n");
      out.write("        <p>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${restView.explanation}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</p>\r\n");
      out.write("    </section>\r\n");
      out.write("</div>\r\n");
      out.write("<!-- 리뷰 섹션 -->\r\n");
      if (_jspx_meth_c_005fif_005f2(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("\r\n");
      out.write("<section class=\"reviews\">\r\n");
      out.write("    <h2>리뷰</h2>\r\n");
      out.write("    <div class=\"reviewList\">\r\n");
      out.write("        <!-- 리뷰 내용이 여기에 삽입됩니다 -->\r\n");
      out.write("    </div>\r\n");
      out.write("</section>\r\n");
      out.write("<!-- 지도 영역  -->\r\n");
      out.write(" <section class=\"map\">\r\n");
      out.write("<h2>가게 위치</h2>\r\n");
      out.write("    <div id=\"map\" style=\"width:100%;height:700px;\"></div>\r\n");
      out.write("    <!-- 서버에서 전달받은 데이터 JSON으로 변환 -->\r\n");
      out.write("    <script type=\"application/json\" id=\"storeData\">\r\n");
      out.write("        ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${kakaomapJson}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\r\n");
      out.write("    </script>\r\n");
      out.write("<script>\r\n");
      out.write("    function loadKakaoMapsScript(callback) {\r\n");
      out.write("        const script = document.createElement('script');\r\n");
      out.write("        script.src = 'https://dapi.kakao.com/v2/maps/sdk.js?appkey=b45e962e5c780aecefa8a8cae0f46328&autoload=false';\r\n");
      out.write("        script.onload = callback;\r\n");
      out.write("        script.onerror = function() {\r\n");
      out.write("            console.error('Failed to load Kakao Maps script.');\r\n");
      out.write("        };\r\n");
      out.write("        document.head.appendChild(script);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function initializeMap() {\r\n");
      out.write("        kakao.maps.load(function() {\r\n");
      out.write("            const jsonString = document.getElementById('storeData').textContent;\r\n");
      out.write("            let locations;\r\n");
      out.write("            try {\r\n");
      out.write("                locations = JSON.parse(jsonString);\r\n");
      out.write("                console.log('Parsed JSON data:', locations); // JSON 데이터 확인\r\n");
      out.write("            } catch (e) {\r\n");
      out.write("                console.error('Failed to parse JSON data:', e);\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            const targetRestCode = locations.length > 0 ? locations[0].rest_code : null;\r\n");
      out.write("            const targetLocations = locations.filter(locations => locations.rest_code === targetRestCode);\r\n");
      out.write("\r\n");
      out.write("            if (targetLocations.length === 0) {\r\n");
      out.write("                console.error('No store data found for the specified rest_code.');\r\n");
      out.write("                return;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            const firstLocation = targetLocations[0];\r\n");
      out.write("            const centerPosition = new kakao.maps.LatLng(parseFloat(firstLocation.x_point), parseFloat(firstLocation.y_point));\r\n");
      out.write("            \r\n");
      out.write("            const mapContainer = document.getElementById('map');\r\n");
      out.write("            const mapOptions = {\r\n");
      out.write("                center: centerPosition, \r\n");
      out.write("                level: 1,\r\n");
      out.write("                disableDefaultUI: true\r\n");
      out.write("            };\r\n");
      out.write("            const map = new kakao.maps.Map(mapContainer, mapOptions);\r\n");
      out.write("\r\n");
      out.write("            \r\n");
      out.write("            // 지도 이동 제어 비활성화\r\n");
      out.write("            map.setDraggable(false); // 드래그로 이동 불가\r\n");
      out.write("            map.setZoomable(false); // 줌 조절 불가\r\n");
      out.write("\r\n");
      out.write("            // 마커와 정보창 추가\r\n");
      out.write("            targetLocations.forEach(locations => {\r\n");
      out.write("                const position = new kakao.maps.LatLng(parseFloat(locations.x_point), parseFloat(locations.y_point));\r\n");
      out.write("                const marker = new kakao.maps.Marker({\r\n");
      out.write("                    position: position,\r\n");
      out.write("                    map: map,\r\n");
      out.write("                    clickable : true\r\n");
      out.write("                });\r\n");
      out.write("                \r\n");
      out.write("                marker.setMap(map);\r\n");
      out.write("                \r\n");
      out.write("                const infowindowContent = `<div style=\"padding:5px; font-size : 0.5em;\">`+locations.store_name+`</div>`;\r\n");
      out.write("                iwRemoveable = true;                \r\n");
      out.write("                \r\n");
      out.write("                // InfoWindow 객체 생성\r\n");
      out.write("                const infowindow = new kakao.maps.InfoWindow({\r\n");
      out.write("                    content: infowindowContent,\r\n");
      out.write("                    removable : iwRemoveable\r\n");
      out.write("                });\r\n");
      out.write("                \r\n");
      out.write("                console.log(locations.store_name);\r\n");
      out.write("                console.log(locations.addr);\r\n");
      out.write("                \r\n");
      out.write("                kakao.maps.event.addListener(marker, 'click', function() {\r\n");
      out.write("                    infowindow.open(map, marker);\r\n");
      out.write("                });\r\n");
      out.write("            });\r\n");
      out.write("        });\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    loadKakaoMapsScript(initializeMap);\r\n");
      out.write("    </script>\r\n");
      out.write("    </section>\r\n");
      out.write("    \r\n");
      out.write("  <!-- 같은 카테고리의 목록 보여주기 -->\r\n");
      out.write("<section class=\"similarRestaurant\">\r\n");
      out.write("    <h2>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${restView.store_name}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("과 비슷한 맛집</h2>\r\n");
      out.write("    <div class=\"RestaurantSimilar\">\r\n");
      out.write("        ");
      if (_jspx_meth_c_005fforEach_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("</section>\r\n");
      out.write("\r\n");
      out.write("<!-- 리뷰 보여주는건 위 아래 둘다 보여지게  -->\r\n");
      out.write("<section class=\"reviews\">\r\n");
      out.write("        <h2>리뷰</h2>\r\n");
      out.write("        <div class=\"reviewList\">\r\n");
      out.write("        </div>\r\n");
      out.write("    </section>");
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/mini/css/footer.css\" type=\"text/css\"/>\r\n");

    Boolean excludeFooter = (Boolean) request.getAttribute("excludeFooter");
    if (excludeFooter == null || !excludeFooter) {

      out.write("\r\n");
      out.write("  \r\n");
      out.write("\r\n");
      out.write("   <footer>\r\n");
      out.write("      <div class=\"inner\">\r\n");
      out.write("        <div class=\"footer-message\">부산의 축제와 맛집을 소개하는 웹사이트</div>\r\n");
      out.write("        <div class=\"footer-contact\">컨택: ict@google.com</div>\r\n");
      out.write("        <div class=\"footer-copyright\">Copyright 2024 All ⓒ rights reserved</div>\r\n");
      out.write("      </div>\r\n");
      out.write("    </footer>\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>\r\n");

    }

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fif_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f0 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f0_reused = false;
    try {
      _jspx_th_c_005fif_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f0.setParent(null);
      // /layout/header.jspf(157,15) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${logStatus != 'Y'}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f0 = _jspx_th_c_005fif_005f0.doStartTag();
      if (_jspx_eval_c_005fif_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("                   <li class=\"lo\"><a onclick=\"openLoginPopup()\"><img src=\"/mini/images/main/unjoin.png\" style=\"width:60px; height:60px;\"/></a></li>\r\n");
          out.write("               ");
          int evalDoAfterBody = _jspx_th_c_005fif_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f0);
      _jspx_th_c_005fif_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fif_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f1 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f1_reused = false;
    try {
      _jspx_th_c_005fif_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f1.setParent(null);
      // /layout/header.jspf(160,15) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f1.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${logStatus == 'Y'}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f1 = _jspx_th_c_005fif_005f1.doStartTag();
      if (_jspx_eval_c_005fif_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("                   <li class=\"lo\"><a href=\"/mini/mypage/mypage\"><img src=\"/mini/images/main/join.png\" style=\"width:60px; height:60px;\"/></a></li>\r\n");
          out.write("               ");
          int evalDoAfterBody = _jspx_th_c_005fif_005f1.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f1);
      _jspx_th_c_005fif_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f1_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fif_005f2(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f2 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f2_reused = false;
    try {
      _jspx_th_c_005fif_005f2.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f2.setParent(null);
      // /WEB-INF/views/board/rest/RestView.jsp(297,0) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f2.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${logStatus == 'Y'}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f2 = _jspx_th_c_005fif_005f2.doStartTag();
      if (_jspx_eval_c_005fif_005f2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("    <section class=\"review-form\">\r\n");
          out.write("        <h3>리뷰 작성하기</h3>\r\n");
          out.write("       <form id=\"reviewForm\" method=\"post\" action=\"/mini/rest/restView/");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${restView.rest_code}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("/ReviewOk\">\r\n");
          out.write("            <input type=\"hidden\" name=\"rest_code\" value=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${restView.rest_code}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("\"/>\r\n");
          out.write("            \r\n");
          out.write("            <!-- 리뷰 내용 -->\r\n");
          out.write("            <div class=\"form-group\">\r\n");
          out.write("                <label for=\"contents\">리뷰 내용:</label>\r\n");
          out.write("                <textarea id=\"contents\" name=\"contents\" rows=\"4\" required></textarea>\r\n");
          out.write("            </div>\r\n");
          out.write("            \r\n");
          out.write("            <!-- 별점 선택 -->\r\n");
          out.write("            <div class=\"form-group\">\r\n");
          out.write("                <label for=\"rating\">별점:</label>\r\n");
          out.write("                <div class=\"rating\">\r\n");
          out.write("                    <span class=\"star\" data-value=\"1\">★</span>\r\n");
          out.write("                    <span class=\"star\" data-value=\"2\">★</span>\r\n");
          out.write("                    <span class=\"star\" data-value=\"3\">★</span>\r\n");
          out.write("                    <span class=\"star\" data-value=\"4\">★</span>\r\n");
          out.write("                    <span class=\"star\" data-value=\"5\">★</span>\r\n");
          out.write("                </div>\r\n");
          out.write("                <input type=\"hidden\" id=\"selectedRating\" name=\"rating\" value=\"\"/> <!-- 선택한 별점 값을 저장 -->\r\n");
          out.write("            </div>\r\n");
          out.write("            \r\n");
          out.write("            <!-- 리뷰 제출 -->\r\n");
          out.write("            <input class=\"review_submit\" type=\"submit\" value=\"리뷰등록\"/> <!-- 버튼을 submit으로 변경 -->\r\n");
          out.write("        </form>\r\n");
          out.write("    </section>\r\n");
          int evalDoAfterBody = _jspx_th_c_005fif_005f2.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f2);
      _jspx_th_c_005fif_005f2_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f2, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f2_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fforEach_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f0_reused = false;
    try {
      _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f0.setParent(null);
      // /WEB-INF/views/board/rest/RestView.jsp(427,8) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setVar("restaurant");
      // /WEB-INF/views/board/rest/RestView.jsp(427,8) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/board/rest/RestView.jsp(427,8) '${similarRestaurant}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${similarRestaurant}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
        if (_jspx_eval_c_005fforEach_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("\r\n");
            out.write("            <div class=\"photo-item\">\r\n");
            out.write("                <a href=\"/mini/rest/restView/");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${restaurant.rest_code}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\">\r\n");
            out.write("                    <img src=\"/mini/images/Food/");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${restaurant.imageurl}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\" alt=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${restView.store_name}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("\"/>\r\n");
            out.write("                </a>\r\n");
            out.write("                <p>");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${restaurant.store_name}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</p>\r\n");
            out.write("            </div>\r\n");
            out.write("        ");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f0.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
      _jspx_th_c_005fforEach_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f0_reused);
    }
    return false;
  }
}
