/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.91
 * Generated at: 2024-11-13 04:47:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.ict.mini.vo.RestVO;
import com.ict.mini.vo.FestivalVO;
import java.util.List;

public final class home_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(4);
    _jspx_dependants.put("jar:file:/C:/Users/ICT01-21/Desktop/miniProject%2009-09%2006.12/miniProject%2009-09%2006.12/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/miniProject2/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/layout/header.jspf", Long.valueOf(1725792806775L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1724403605343L));
    _jspx_dependants.put("/layout/footer.jspf", Long.valueOf(1725708625814L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.ict.mini.vo.RestVO");
    _jspx_imports_classes.add("com.ict.mini.vo.FestivalVO");
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fif_0026_005ftest;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>DANDI</title>\r\n");
      out.write("\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("<!-- 부트스트랩 -->\r\n");
      out.write("<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js\"></script>\r\n");
      out.write("<!-- 슬릭슬라이더 -->\r\n");
      out.write("<!-- 제이쿼리 -->\r\n");
      out.write("<script\r\n");
      out.write("   src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js\"></script>\r\n");
      out.write("<!--slick slider 필요 태그 st-->\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"//cdn.jsdelivr.net/npm/slick-carousel@1.8.1/slick/slick.css\"/>\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"//cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.5.8/slick-theme.min.css\">\r\n");
      out.write("<!-- jQuery CDN -->\r\n");
      out.write("<script src=\"//code.jquery.com/jquery-1.11.0.min.js\"></script>\r\n");
      out.write("<script src=\"//code.jquery.com/jquery-migrate-1.2.1.min.js\"></script>\r\n");
      out.write("<!-- slick Carousel CDN -->\r\n");
      out.write("<script type=\"text/javascript\" src=\"//cdn.jsdelivr.net/jquery.slick/1.5.7/slick.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<!--폰트-->\r\n");
      out.write("<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\r\n");
      out.write("<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/css2?family=Gothic+A1:wght@100;200;300;400;500;600;700;800;900&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\r\n");
      out.write("<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/css2?family=Gothic+A1:wght@100;200;300;400;500;600;700;800;900&family=Noto+Sans:ital,wght@0,100..900;1,100..900&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/mini/css/header.css\" type=\"text/css\"/>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("   $(document).ready(function(){\r\n");
      out.write("         $('.autoplay').slick({\r\n");
      out.write("            centerMode: true,\r\n");
      out.write("            slidesToShow: 4,\r\n");
      out.write("            slidesToScroll: 1,\r\n");
      out.write("            autoplay: true,\r\n");
      out.write("            autoplaySpeed: 2000,\r\n");
      out.write("           \r\n");
      out.write("            draggable:true ,\r\n");
      out.write("            infinite: true\r\n");
      out.write("         });\r\n");
      out.write("      \r\n");
      out.write("   });\r\n");
      out.write("   $(document).ready(function(){\r\n");
      out.write("      $('.center').slick({\r\n");
      out.write("         centerMode: true,\r\n");
      out.write("         centerPadding: '60px',\r\n");
      out.write("         slidesToShow: 5,\r\n");
      out.write("         autoplay: true,\r\n");
      out.write("         autoplaySpeed: 2000,\r\n");
      out.write("       \r\n");
      out.write("         draggable:true ,\r\n");
      out.write("         infinite: true,\r\n");
      out.write("         responsive: [\r\n");
      out.write("         {\r\n");
      out.write("            breakpoint: 768,\r\n");
      out.write("            settings: {\r\n");
      out.write("            arrows: false,\r\n");
      out.write("            centerMode: true,\r\n");
      out.write("            centerPadding: '40px',\r\n");
      out.write("            slidesToShow: 3\r\n");
      out.write("            }\r\n");
      out.write("         },\r\n");
      out.write("         {\r\n");
      out.write("            breakpoint: 480,\r\n");
      out.write("            settings: {\r\n");
      out.write("            arrows: false,\r\n");
      out.write("            centerMode: true,\r\n");
      out.write("            centerPadding: '40px',\r\n");
      out.write("            slidesToShow: 1\r\n");
      out.write("            }\r\n");
      out.write("         }\r\n");
      out.write("      ]\r\n");
      out.write("      });\r\n");
      out.write("   });\r\n");
      out.write("</script>\r\n");
      out.write("<script>\r\n");
      out.write("   $(function(){\r\n");
      out.write("          // 스크롤 시 header fade-in\r\n");
      out.write("          $(document).on('scroll', function(){\r\n");
      out.write("              if($(window).scrollTop() > 100){\r\n");
      out.write("                  $(\"#header\").removeClass(\"deactive\");\r\n");
      out.write("                  $(\"#header\").addClass(\"active\");\r\n");
      out.write("              }else{\r\n");
      out.write("                  $(\"#header\").removeClass(\"active\");\r\n");
      out.write("                  $(\"#header\").addClass(\"deactive\");\r\n");
      out.write("              }\r\n");
      out.write("          })\r\n");
      out.write("      \r\n");
      out.write("      });\r\n");
      out.write("   function openLoginPopup() {\r\n");
      out.write("       window.open('/mini/mypage/login', 'LoginPopup', 'width=465, height=525 ,left=1200, top=150');\r\n");
      out.write("   }\r\n");
      out.write("\r\n");
      out.write("   function joinPopup(){\r\n");
      out.write("       window.open('/mini/mypage/join', 'JoinPopup', 'width=530, height=930 ,left=1200, top=80');\r\n");
      out.write("   }\r\n");
      out.write("\r\n");
      out.write("   function findIdPopup(){\r\n");
      out.write("       window.open('/mini/mypage/findId', 'findIdPopup', 'width=465, height=525 ,left=1200, top=150');\r\n");
      out.write("   }\r\n");
      out.write("   function findPwdPopup(){\r\n");
      out.write("       window.open('/mini/mypage/findPwd', 'findPwdPopup', 'width=465, height=525 ,left=1200, top=150');\r\n");
      out.write("   }\r\n");
      out.write("   \r\n");
      out.write("   function loginClosed() {\r\n");
      out.write("       // 로그인 처리 로직\r\n");
      out.write("       // 예를 들어, resultVo를 통해 사용자 정보를 가져왔다고 가정합니다.\r\n");
      out.write("       const userId = resultVo.getUserid();\r\n");
      out.write("       const userName = resultVo.getUsername();\r\n");
      out.write("       \r\n");
      out.write("       // 세션에 로그인 상태 저장 (예시로 localStorage 사용)\r\n");
      out.write("       session.setAttribute(\"logId\", resultVo.getUserid());\r\n");
      out.write("      session.setAttribute(\"logName\", resultVo.getUsername());\r\n");
      out.write("      session.setAttribute(\"logStatus\", \"Y\");\r\n");
      out.write("      \r\n");
      out.write("\r\n");
      out.write("       // 메인 페이지의 로컬 스토리지 업데이트 및 로그인 상태 갱신\r\n");
      out.write("       if (window.opener && !window.opener.closed) {\r\n");
      out.write("           window.opener.updateLoginStatus(userId, userName);\r\n");
      out.write("       }\r\n");
      out.write("\r\n");
      out.write("       // 팝업 창 닫기\r\n");
      out.write("       window.close();\r\n");
      out.write("   }\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write(" ");

    Boolean excludeHeader = (Boolean) request.getAttribute("excludeHeader");

    if (excludeHeader == null || !excludeHeader) {

      out.write("\r\n");
      out.write("   <header>\r\n");
      out.write("       <div id=\"header\" class=\"deactive\">\r\n");
      out.write("         <h1 class=\"title\">\r\n");
      out.write("            <a href=\"/mini/\"><img src=\"/mini/images/main/logo.png\"></a>\r\n");
      out.write("         </h1>\r\n");
      out.write("         <!--검색창구현-->\r\n");
      out.write("         <nav>\r\n");
      out.write("            <ul>\r\n");
      out.write("               <li><a href=\"/mini/festival/festivalList\">Festival</a></li>\r\n");
      out.write("               <li><a href=\"/mini/rest/restList\">Food</a></li>\r\n");
      out.write("               <li><a href=\"/mini/course/courseList\">Course</a></li>\r\n");
      out.write("               <li><a href=\"/mini/calendar/cal\">Calendar</a></li>\r\n");
      out.write("\r\n");
      out.write("               ");
      if (_jspx_meth_c_005fif_005f0(_jspx_page_context))
        return;
      out.write("   \r\n");
      out.write("               ");
      if (_jspx_meth_c_005fif_005f1(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("            </ul>\r\n");
      out.write("         </nav>\r\n");
      out.write("      </div> \r\n");
      out.write("   </header>\r\n");

    }

      out.write('\r');
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("	\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels\"></script>\n");
      out.write("<link rel=\"stylesheet\" href=\"/mini/css/main.css\" type=\"text/css\"/>\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("// 수온 파고구하기\n");
      out.write("var today = new Date();\n");
      out.write("var year = today.getFullYear();\n");
      out.write("var month = today.getMonth()+1;\n");
      out.write("var day = today.getDate();\n");
      out.write("\n");
      out.write("if(month<10){\n");
      out.write("	month = \"0\"+month;\n");
      out.write("}\n");
      out.write("if(day<10){\n");
      out.write("	day = \"0\"+day;\n");
      out.write("}\n");
      out.write("var now=year+\"\"+month+\"\"+day;\n");
      out.write("console.log(now);\n");
      out.write("\n");
      out.write("let max_water_temp = -100;\n");
      out.write("let min_water_temp = 100;\n");
      out.write("\n");
      out.write("var value='");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${firstVisit}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("';\n");
      out.write("console.log(value);\n");
      out.write("var site=['TW_0090','TW_0062','TW_0080','TW_0092'];\n");
      out.write("var URL=[];\n");
      out.write("var URL2=[];\n");
      out.write("for(i=0;i<site.length;i++){\n");
      out.write("	URL.push(\"http://www.khoa.go.kr/api/oceangrid/obsWaveHight/search.do?ServiceKey=bVUGmyQDcLqlcLxMMQjNA==&ObsCode=\"+site[i]+\"&Date=\"+now+\"&ResultType=json\");\n");
      out.write("	URL2.push(\"http://www.khoa.go.kr/api/oceangrid/tidalBuTemp/search.do?ServiceKey=bVUGmyQDcLqlcLxMMQjNA==&ObsCode=\"+site[i]+\"&Date=\"+now+\"&ResultType=json\")\n");
      out.write("}\n");
      out.write("var divs=[\"#site1\",\"#site2\",\"#site3\",\"#site4\"];\n");
      out.write("var wdivs=[\"#water_temp1\",\"#water_temp2\",\"#water_temp3\",\"#water_temp4\"];\n");
      out.write("var water_temp=[];\n");
      out.write("var wave_height = [];\n");
      out.write("let waterData = {\n");
      out.write("	max: -Infinity, \n");
      out.write("	min: Infinity\n");
      out.write("	};\n");
      out.write("let waterTemp={\n");
      out.write("	max: -Infinity, \n");
      out.write("	min: Infinity\n");
      out.write("};\n");
      out.write("let max_temp = -100;\n");
      out.write("let min_temp = 100;\n");
      out.write("let max_min_temp = [];\n");
      out.write("let rain = [];\n");
      out.write("var labels = {};\n");
      out.write("var datas = {};\n");
      out.write("var chart;\n");
      out.write("var currentLabels = []; // 현재 선택된 날짜의 시간 데이터\n");
      out.write("var currentData = []; // 현재 선택된 날짜의 온도 데이터\n");
      out.write("var selectedDate = \"\"; // 현재 선택된 날짜를 저장하는 변수\n");
      out.write("var weather = {};\n");
      out.write("var weatherlist = {};\n");
      out.write("let max_min_tempData = {}; \n");
      out.write("function updateChart(date) {\n");
      out.write("    selectedDate = date;  // 선택된 날짜를 저장\n");
      out.write("    currentLabels = labels[selectedDate];\n");
      out.write("    currentData = datas[selectedDate];\n");
      out.write("\n");
      out.write("    // 오늘 날짜인지 확인\n");
      out.write("    let today = new Date();\n");
      out.write("    let todayFormatted = today.getFullYear() + '-' + ('0' + (today.getMonth() + 1)).slice(-2) + '-' + ('0' + today.getDate()).slice(-2);\n");
      out.write("\n");
      out.write("    // 오늘 날짜이면 closestIndex부터 데이터 슬라이스\n");
      out.write("    if (selectedDate === todayFormatted) {\n");
      out.write("        let closestIndex = 0;\n");
      out.write("        let currentHour = today.getHours();\n");
      out.write("        let minDifference = Number.MAX_VALUE;\n");
      out.write("\n");
      out.write("        for (let i = 0; i < labels[selectedDate].length; i++) {\n");
      out.write("            let hour = parseInt(labels[selectedDate][i].substring(0, 2)); // 시간 추출\n");
      out.write("            let diff = Math.abs(currentHour - hour); // 현재 시간과 각 시간의 차이 계산\n");
      out.write("\n");
      out.write("            if (diff < minDifference) {\n");
      out.write("                minDifference = diff;\n");
      out.write("                closestIndex = i;  // 가장 가까운 시간의 인덱스 저장\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        // 오늘의 가까운 시간대부터 차트 업데이트\n");
      out.write("        chart.data.labels = currentLabels.slice(closestIndex);  // 가장 가까운 시간부터 시작\n");
      out.write("        chart.data.datasets[0].data = currentData.slice(closestIndex);  // 가장 가까운 시간대의 데이터부터 시작\n");
      out.write("        console.log(\"오늘 날짜 차트 업데이트:\", chart.data.labels);\n");
      out.write("    } else {\n");
      out.write("        // 오늘이 아닌 경우 전체 데이터를 보여줌\n");
      out.write("        chart.data.labels = currentLabels;\n");
      out.write("        chart.data.datasets[0].data = currentData;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    chart.update({\n");
      out.write("        duration: 800,  // 0.8초 동안 애니메이션 효과\n");
      out.write("        easing: 'easeInOutQuad' // 애니메이션 속도 조절\n");
      out.write("    });\n");
      out.write("}\n");
      out.write("\n");
      out.write("window.onload = function () {\n");
      out.write("    setTimeout(function () {\n");
      out.write("        var xHttp = new XMLHttpRequest();\n");
      out.write("\n");
      out.write("        xHttp.onreadystatechange = function () {\n");
      out.write("            if (this.readyState == 4 && this.status == 200) {\n");
      out.write("                let result = JSON.parse(this.responseText);\n");
      out.write("                \n");
      out.write("                weather = result;\n");
      out.write("                console.log(\"값오는지 확인\", weather);\n");
      out.write("               \n");
      out.write("                max_min_temp = [];\n");
      out.write("                rain = [];\n");
      out.write("               \n");
      out.write("\n");
      out.write("                result.list.forEach(item => {\n");
      out.write("                    let date = new Date(item.dt_txt);\n");
      out.write("                    let formattedDate = date.getFullYear() + '-' + ('0' + (date.getMonth() + 1)).slice(-2) + '-' + ('0' + date.getDate()).slice(-2);\n");
      out.write("                    let formattedTime = ('0' + date.getHours()).slice(-2) + ':' + ('0' + date.getMinutes()).slice(-2);\n");
      out.write("\n");
      out.write("                    if (!labels[formattedDate]) {\n");
      out.write("                        labels[formattedDate] = [];\n");
      out.write("                        datas[formattedDate] = [];\n");
      out.write("                    }\n");
      out.write("\n");
      out.write("                    labels[formattedDate].push(formattedTime);  // 시간 추가\n");
      out.write("                    datas[formattedDate].push(item.main.temp);  // 온도 추가\n");
      out.write("\n");
      out.write("                    // 최고/최저 온도와 비 여부 저장\n");
      out.write("                    if (!max_min_tempData[formattedDate]) {\n");
      out.write("                        max_min_tempData[formattedDate] = { \n");
      out.write("                            max: -Infinity, \n");
      out.write("                            min: Infinity, \n");
      out.write("                            icon: item.weather[0].icon, \n");
      out.write("                            hasRain: false \n");
      out.write("                        };\n");
      out.write("                    }\n");
      out.write("\n");
      out.write("                    if (item.main.temp_max > max_min_tempData[formattedDate].max) {\n");
      out.write("                        max_min_tempData[formattedDate].max = item.main.temp_max;\n");
      out.write("                    }\n");
      out.write("\n");
      out.write("                    if (item.main.temp_min < max_min_tempData[formattedDate].min) {\n");
      out.write("                        max_min_tempData[formattedDate].min = item.main.temp_min;\n");
      out.write("                    }\n");
      out.write("\n");
      out.write("                    // 비오는 날씨 아이콘 저장\n");
      out.write("                    if (item.weather[0].icon.startsWith(\"09\") || item.weather[0].icon.startsWith(\"10\")) {\n");
      out.write("                        max_min_tempData[formattedDate].hasRain = true;\n");
      out.write("                        max_min_tempData[formattedDate].icon = \"09n\"; // 비오는 이미지로 설정\n");
      out.write("                    }\n");
      out.write("                });\n");
      out.write("\n");
      out.write("                console.log(\"최고/최저 온도 및 비오는 날씨 저장:\", max_min_tempData);\n");
      out.write("\n");
      out.write("                // 오늘 날짜 처리\n");
      out.write("                let today = new Date();\n");
      out.write("                let todayFormatted = today.getFullYear() + '-' + ('0' + (today.getMonth() + 1)).slice(-2) + '-' + ('0' + today.getDate()).slice(-2);\n");
      out.write("\n");
      out.write("                if (!labels[todayFormatted]) {\n");
      out.write("                    todayFormatted = Object.keys(labels)[0]; // 첫 번째 날짜 선택\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                currentLabels = labels[todayFormatted];\n");
      out.write("                currentData = datas[todayFormatted];\n");
      out.write("                selectedDate = todayFormatted; // 선택된 날짜 저장\n");
      out.write("\n");
      out.write("                // 차트 초기화\n");
      out.write("             const data = {\n");
      out.write("				    labels: currentLabels, \n");
      out.write("				    datasets: [{\n");
      out.write("				        data: currentData, \n");
      out.write("				        fill: true,\n");
      out.write("				        borderColor: \"#FFD632\",\n");
      out.write("				        backgroundColor:\"#FFF5CC\",\n");
      out.write("				        tension: 0.5,\n");
      out.write("				    }]\n");
      out.write("				};\n");
      out.write("				\n");
      out.write("				const config = {\n");
      out.write("				    type: \"line\",\n");
      out.write("				    data: data,\n");
      out.write("				    options: {\n");
      out.write("				        onClick: (event) => {\n");
      out.write("				            const points = chart.getElementsAtEventForMode(event, 'nearest', { intersect: true }, false);\n");
      out.write("				            if (points.length > 0) {\n");
      out.write("				                const elementIndex = points[0].index;\n");
      out.write("				                weatherlist = weather.list[elementIndex];\n");
      out.write("				                const timeLabel = data.labels[elementIndex];\n");
      out.write("				                const value = data.datasets[0].data[elementIndex];\n");
      out.write("				\n");
      out.write("				                nowweather(selectedDate, timeLabel, value, weatherlist);\n");
      out.write("				            }\n");
      out.write("				        },\n");
      out.write("				        scales: {\n");
      out.write("				            x: {\n");
      out.write("				                grid: { display: false }\n");
      out.write("				            },\n");
      out.write("				            y: {\n");
      out.write("				            	  suggestedMin: Math.min(...currentData) - 1, \n");
      out.write("				            	    suggestedMax: Math.max(...currentData) + 1,\n");
      out.write("				                beginAtZero: false,\n");
      out.write("				                grid: { display: false },\n");
      out.write("				                ticks: { display: false }  // Y축 값 숨기기\n");
      out.write("				            }\n");
      out.write("				        },\n");
      out.write("				        plugins: {\n");
      out.write("				            legend: { display: false },\n");
      out.write("				            datalabels: {\n");
      out.write("				                display: true,  // 각 포인트에 값을 표시\n");
      out.write("				                align: 'top',   // 점 위에 표시\n");
      out.write("				                anchor: 'end',  // 점의 끝 부분에 맞춤\n");
      out.write("				                color: 'black', // 텍스트 색상\n");
      out.write("				                formatter: function(value) {\n");
      out.write("				                    return value.toFixed(1);  // 소수점 2자리로 표시\n");
      out.write("				                }\n");
      out.write("				            }\n");
      out.write("				        }\n");
      out.write("				    },\n");
      out.write("				    plugins: [ChartDataLabels]  // datalabels 플러그인 활성화\n");
      out.write("				};\n");
      out.write("				\n");
      out.write("				chart = new Chart(document.getElementById(\"myChart\"), config);\n");
      out.write("                // 차트에서 현재 시간에 가장 가까운 데이터로 시작하도록 설정\n");
      out.write("                chart.update();\n");
      out.write("				\n");
      out.write("                createDateButtons();\n");
      out.write("\n");
      out.write("                // 오늘 날짜의 날씨 정보 표시\n");
      out.write("                var nowday = new Date(selectedDate);\n");
      out.write("                var days = ['일', '월', '화', '수', '목', '금', '토'];\n");
      out.write("                var dayOfWeek = days[nowday.getDay()];\n");
      out.write("                var tag = \"<div class='weatherimg'><img src='/mini/images/weather/\" + weather.list[0].weather[0].icon + \".png'/>\";\n");
      out.write("                tag +=\"<span class='weatherdata'>\"+weather.list[0].main.temp+\"<span>°C</div>\";\n");
      out.write("                tag +=\"<div class='weatherrain'><div class='nowdata'>강수확률:\"+weather.list[0].pop+\"%</div><div class='nowdata'>습도:\"+weather.list[0].main.humidity+\"%</div>\";\n");
      out.write("                tag +=\"<div>풍속:\"+weather.list[0].wind.speed+\"m/s</div></div>\";\n");
      out.write("                tag +=\"<div class='daysweather'><div>날씨</div><div>\"+dayOfWeek+\"요일</div><div>\"+weather.list[0].weather[0].description+\"</div>\"\n");
      out.write("                $(\"#nowweather\").html(tag);\n");
      out.write("            }\n");
      out.write("        };\n");
      out.write("\n");
      out.write("        var url = \"https://api.openweathermap.org/data/2.5/forecast?q=busan&appid=79908538f557fa6efd9c4f4b21907bca&lang=kr&units=metric\";\n");
      out.write("        xHttp.open(\"GET\", url, true);\n");
      out.write("        xHttp.send();\n");
      out.write("    }, 100);\n");
      out.write("	URL2.forEach(function(url,index){\n");
      out.write("		$.ajax({\n");
      out.write("			url:url,\n");
      out.write("			success:function(result){\n");
      out.write("				let r =JSON.parse(result);\n");
      out.write("				console.log(r.result);\n");
      out.write("				if(r.result.data && r.result.data.length>0){\n");
      out.write("					for(var i = 0; i<r.result.data.length;i++){\n");
      out.write("						let temp = r.result.data[i].water_temp;\n");
      out.write("						if(temp> waterTemp.max){\n");
      out.write("							waterTemp.max=temp;\n");
      out.write("						}if(temp<waterTemp.min){\n");
      out.write("							waterTemp.min=temp;\n");
      out.write("						}\n");
      out.write("						water_temp.push(temp);\n");
      out.write("					}\n");
      out.write("				}\n");
      out.write("				 $(wdivs[index]).html(\"<span id='suon'>수온</span><span id='watertemp'>\"+ waterTemp.min + \"~\" + waterTemp.max+\"°C</span>\"); \n");
      out.write("				\n");
      out.write("			},\n");
      out.write("			error:function(e){\n");
      out.write("				console.log(e);\n");
      out.write("			}\n");
      out.write("		});\n");
      out.write("		\n");
      out.write("	});\n");
      out.write("	\n");
      out.write("	//파고구하기\n");
      out.write("    URL.forEach(function(url,index) {\n");
      out.write("        $.ajax({\n");
      out.write("            url: url,\n");
      out.write("            success: function(result){\n");
      out.write("                // 데이터가 유효한지 확인\n");
      out.write("                let r = JSON.parse(result);\n");
      out.write("                console.log(r.result);\n");
      out.write("                console.log(r.result.data.length);\n");
      out.write("                if (r.result.data && r.result.data.length > 0) {\n");
      out.write("                    for (var i = 0; i < r.result.data.length; i++) {\n");
      out.write("                        let height = r.result.data[i].wave_height;\n");
      out.write("                        // 최대값과 최소값 갱신\n");
      out.write("                        if (height > waterData.max) {\n");
      out.write("                            waterData.max = height;\n");
      out.write("                        }\n");
      out.write("                        if (height >0 && height < waterData.min) {\n");
      out.write("                            waterData.min = height;\n");
      out.write("                        }\n");
      out.write("			            // 각 wave_height 값을 배열에 저장\n");
      out.write("                        wave_height.push(height);\n");
      out.write("                    }\n");
      out.write("                } \n");
      out.write("                $(divs[index]).html(\"<span id='pago'>파고</span><span id='waterhight'>\"+ waterData.min + \"~\" + waterData.max+\"m</span>\"); \n");
      out.write("            },\n");
      out.write("            error: function(error) {\n");
      out.write("                console.log(error);\n");
      out.write("            }\n");
      out.write("        });\n");
      out.write("    });\n");
      out.write("    \n");
      out.write("	if(value==null||value==\"\"){\n");
      out.write("		console.log(value);\n");
      out.write("		$.ajax({\n");
      out.write("			url:\"/mini/mainFestivalList/부산\",\n");
      out.write("			success:function(r){\n");
      out.write("				  $('#autoplay').slick('unslick');\n");
      out.write("				console.log(\"성공\");\n");
      out.write("				var tag=\"\";\n");
      out.write("				r.map(function(list,idx){\n");
      out.write("					tag+=\"<div class='class2'><a href=/mini/festival/festivalView/\"+list.no+\"><img src='/mini/images/poster/\"+list.poster+\"'/><div class='postername'>\"+list.title+\"</div></a></div>\"\n");
      out.write("				})				\n");
      out.write("				$(\"#autoplay\").html(tag);\n");
      out.write("				$(document).ready(function(){\n");
      out.write("				         $('.autoplay').slick({\n");
      out.write("				            centerMode: true,\n");
      out.write("				            slidesToShow: 4,\n");
      out.write("				            slidesToScroll: 1,\n");
      out.write("				            autoplay: true,\n");
      out.write("				            autoplaySpeed: 2000, \n");
      out.write("				            draggable:true ,\n");
      out.write("				            infinite: true\n");
      out.write("				         });\n");
      out.write("				      \n");
      out.write("				   });\n");
      out.write("			},error:function(e){\n");
      out.write("				console.log(\"실패\");\n");
      out.write("			}\n");
      out.write("			\n");
      out.write("		});\n");
      out.write("		$.ajax({\n");
      out.write("			url:\"/mini/mainRestList/부산\",\n");
      out.write("			success:function(r){\n");
      out.write("				$('#center').slick('unslick');\n");
      out.write("				console.log(\"음식성공\");\n");
      out.write("				var tag=\"\";\n");
      out.write("				r.map(function(list,idx){\n");
      out.write("					tag+= \"<div class='class3'><a href='/mini/rest/restView/\"+list.rest_code+\"'><img src='/mini/images/Food/\"+list.imageurl+\"'/><div>\"+list.store_name+\"</div></a></div>\";\n");
      out.write("				})\n");
      out.write("				$(\"#center\").html(tag);\n");
      out.write("				 $(document).ready(function(){\n");
      out.write("				      $('.center').slick({\n");
      out.write("				         centerMode: true,\n");
      out.write("				         centerPadding: '60px',\n");
      out.write("				         slidesToShow: 5,\n");
      out.write("				         autoplay: true,\n");
      out.write("				         autoplaySpeed: 2000,\n");
      out.write("				         draggable:true ,\n");
      out.write("				         infinite: true,\n");
      out.write("				         responsive: [\n");
      out.write("				         {\n");
      out.write("				            breakpoint: 768,\n");
      out.write("				            settings: {\n");
      out.write("				            arrows: false,\n");
      out.write("				            centerMode: true,\n");
      out.write("				            centerPadding: '40px',\n");
      out.write("				            slidesToShow: 3\n");
      out.write("				            }\n");
      out.write("				         },\n");
      out.write("				         {\n");
      out.write("				            breakpoint: 480,\n");
      out.write("				            settings: {\n");
      out.write("				            arrows: false,\n");
      out.write("				            centerMode: true,\n");
      out.write("				            centerPadding: '40px',\n");
      out.write("				            slidesToShow: 1\n");
      out.write("				            }\n");
      out.write("				         }\n");
      out.write("				      ]\n");
      out.write("				      });\n");
      out.write("				   });	\n");
      out.write("			\n");
      out.write("				\n");
      out.write("			},\n");
      out.write("			error:function(e){\n");
      out.write("				console.log(\"error발생\");\n");
      out.write("			}\n");
      out.write("		});\n");
      out.write("		\n");
      out.write("	}\n");
      out.write("	//축제*행사 랭킹\n");
      out.write("	   $.ajax({\n");
      out.write("	      url:\"/mini/festivalRank\",\n");
      out.write("	      success:function(r){\n");
      out.write("	         var tag=\"\";\n");
      out.write("	         \n");
      out.write("	         r.map(function(list,idx){\n");
      out.write("	            tag+=\"<div class='hitFestivalContent'> <a href=/mini/festival/festivalView/\"+list.no+\"><img src='/mini/images/poster/\"+list.poster+\"'/></a><h5>\"+list.title+\"</h5></div>\";\n");
      out.write("	         });\n");
      out.write("	         \n");
      out.write("	         $(\"#hitFestivalBox\").html(tag);\n");
      out.write("	         \n");
      out.write("	      },\n");
      out.write("	      error:function(e){\n");
      out.write("	         console.log(\"행사축제로드실패\");\n");
      out.write("	      }\n");
      out.write("	      \n");
      out.write("	   });\n");
      out.write("	   //맛집 랭킹\n");
      out.write("	   $.ajax({\n");
      out.write("	      url:\"/mini/restRank\",\n");
      out.write("	      success:function(r){\n");
      out.write("	         var tag=\"<div class='hitFood'><Span>🥇</Span><a href='/mini/rest/restView/\"+r[0].rest_code+\"'><img src='/mini/images/Food/\"+r[0].imageurl+\"'/></a><h4>\"+r[0].store_name+\"<br><h5>\"+r[0].addr+\"</h5></h4></div>\";\n");
      out.write("	            tag+=\"<div class='hitFood'><Span>🥈</Span><a href='/mini/rest/restView/\"+r[1].rest_code+\"'><img src='/mini/images/Food/\"+r[1].imageurl+\"'/></a><h4>\"+r[1].store_name+\"<br><h5>\"+r[1].addr+\"</h5></h4></div>\";\n");
      out.write("	            tag+=\"<div class='hitFood'><Span>🥉</Span><a href='/mini/rest/restView/\"+r[2].rest_code+\"'><img src='/mini/images/Food/\"+r[2].imageurl+\"'/></a><h4>\"+r[2].store_name+\"<br><h5>\"+r[2].addr+\"</h5></h4></div>\";\n");
      out.write("	            tag+=\"<div class='hitFood'><Span>🏅</Span><a href='/mini/rest/restView/\"+r[3].rest_code+\"'><img src='/mini/images/Food/\"+r[3].imageurl+\"'/></a><h4>\"+r[3].store_name+\"<br><h5>\"+r[3].addr+\"</h5></h4></div>\";\n");
      out.write("	            $(\"#hitFoodBox\").html(tag);\n");
      out.write("	      },\n");
      out.write("	      error:function(e){\n");
      out.write("	         console.log(e);\n");
      out.write("	      }\n");
      out.write("	      \n");
      out.write("	   });\n");
      out.write("	//여기까지 로드시 실행될 파트\n");
      out.write("    \n");
      out.write("    \n");
      out.write("};\n");
      out.write("\n");
      out.write("var setbutton=\"0\";\n");
      out.write("function busan(){\n");
      out.write("	\n");
      out.write("	var busan =[ '부산','사상구','사하구','서구','수영구',\n");
      out.write("		'연제구','영도구','중구','해운대구','북구','부산진구','동래구',\n");
      out.write("		'동구','남구','금정구','강서구','기장군'\n");
      out.write("	];\n");
      out.write("	var tag=\"\"\n");
      out.write("	for(var i=0; i<busan.length;i++){\n");
      out.write("		tag += \"<button class='busanbutton' value='\" + busan[i] + \"' onclick='selectgu(\\\"\" + busan[i] + \"\\\")'>\" + busan[i] + \"</button> \";\n");
      out.write("	}\n");
      out.write("		document.getElementById(\"test\").innerHTML=tag;\n");
      out.write("\n");
      out.write("	if(setbutton==\"0\" ||setbutton==\"\" ||setbutton==null){\n");
      out.write("		document.getElementById(\"test\").style.display=\"block\";\n");
      out.write("		\n");
      out.write("\n");
      out.write("		\n");
      out.write("	console.log(busan);\n");
      out.write("	\n");
      out.write("	setbutton=1;\n");
      out.write("	\n");
      out.write("	\n");
      out.write("	}else{\n");
      out.write("		document.getElementById(\"test\").style.display=\"none\";\n");
      out.write("	setbutton=\"0\";\n");
      out.write("	\n");
      out.write("	}\n");
      out.write("	document.getElementById(\"test\").addEventListener(\"mouseleave\", function() {\n");
      out.write("		document.getElementById(\"test\").style.display=\"none\";\n");
      out.write("		setbutton=\"0\";\n");
      out.write("	});\n");
      out.write("	\n");
      out.write("}\n");
      out.write("	function selectgu(busan){\n");
      out.write("		console.log(busan);\n");
      out.write("		\n");
      out.write("		document.getElementById(\"help\").innerText=busan;\n");
      out.write("		$.ajax({\n");
      out.write("			url:\"/mini/mainFestivalList/\"+busan,\n");
      out.write("			success:function(r){\n");
      out.write("				  $('#autoplay').slick('unslick');\n");
      out.write("				console.log(\"성공\");\n");
      out.write("				var tag=\"\";\n");
      out.write("				r.map(function(list,idx){\n");
      out.write("					tag+=\"<div class='class2'><a href=/mini/festival/festivalView/\"+list.no+\"><img src='/mini/images/poster/\"+list.poster+\"'/><div  class='postername'>\"+list.title+\"</div></a></div>\"\n");
      out.write("				})				\n");
      out.write("				$(\"#autoplay\").html(tag);\n");
      out.write("				$(document).ready(function(){\n");
      out.write("				         $('.autoplay').slick({\n");
      out.write("				            centerMode: true,\n");
      out.write("				            slidesToShow: 4,\n");
      out.write("				            slidesToScroll: 1,\n");
      out.write("				            autoplay: true,\n");
      out.write("				            autoplaySpeed: 2000, \n");
      out.write("				            draggable:true ,\n");
      out.write("				            infinite: true\n");
      out.write("				         });\n");
      out.write("				      \n");
      out.write("				   });\n");
      out.write("			},error:function(e){\n");
      out.write("				console.log(\"실패\");\n");
      out.write("			}\n");
      out.write("			\n");
      out.write("		});\n");
      out.write("		$.ajax({\n");
      out.write("			url:\"/mini/mainRestList/\"+busan,\n");
      out.write("			success:function(r){\n");
      out.write("				$('#center').slick('unslick');\n");
      out.write("				console.log(\"음식성공\");\n");
      out.write("				var tag=\"\";\n");
      out.write("				r.map(function(list,idx){\n");
      out.write("					tag+= \"<div class='class3'><a href='/mini/rest/restView/\"+list.rest_code+\"'><img src='/mini/images/Food/\"+list.imageurl+\"'/><div>\"+list.store_name+\"</div></a></div>\";\n");
      out.write("				})\n");
      out.write("				$(\"#center\").html(tag);\n");
      out.write("				 $(document).ready(function(){\n");
      out.write("				      $('.center').slick({\n");
      out.write("				         centerMode: true,\n");
      out.write("				         centerPadding: '60px',\n");
      out.write("				         slidesToShow: 5,\n");
      out.write("				         autoplay: true,\n");
      out.write("				         autoplaySpeed: 2000,\n");
      out.write("				         draggable:true ,\n");
      out.write("				         infinite: true,\n");
      out.write("				         responsive: [\n");
      out.write("				         {\n");
      out.write("				            breakpoint: 768,\n");
      out.write("				            settings: {\n");
      out.write("				            arrows: false,\n");
      out.write("				            centerMode: true,\n");
      out.write("				            centerPadding: '40px',\n");
      out.write("				            slidesToShow: 3\n");
      out.write("				            }\n");
      out.write("				         },\n");
      out.write("				         {\n");
      out.write("				            breakpoint: 480,\n");
      out.write("				            settings: {\n");
      out.write("				            arrows: false,\n");
      out.write("				            centerMode: true,\n");
      out.write("				            centerPadding: '40px',\n");
      out.write("				            slidesToShow: 1\n");
      out.write("				            }\n");
      out.write("				         }\n");
      out.write("				      ]\n");
      out.write("				      });\n");
      out.write("				   });	\n");
      out.write("			\n");
      out.write("				\n");
      out.write("			},error:function(e){\n");
      out.write("				console.log(\"지역선택 음식에러발생\");\n");
      out.write("			}\n");
      out.write("			\n");
      out.write("		});\n");
      out.write("		\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	 function createDateButtons() {\n");
      out.write("	    	var nowday = new Date(selectedDate);\n");
      out.write("	        var days = ['일', '월', '화', '수', '목', '금', '토'];\n");
      out.write("	     \n");
      out.write("	    	console.log(dayOfWeek);\n");
      out.write("	        let buttonContainer = document.getElementById(\"buttonContainer\");\n");
      out.write("	        buttonContainer.innerHTML = \"\"; // 중복 방지\n");
      out.write("	        for (let date in labels) {\n");
      out.write("	        	  let currentDate = new Date(date); \n");
      out.write("	            let button = document.createElement(\"button\");\n");
      out.write("	            var dayOfWeek = days[currentDate.getDay()];\n");
      out.write("	            button.innerHTML = \"<div><div>\"+dayOfWeek+\"</div><div><img src='/mini/images/weather/\"+max_min_tempData[date].icon+\".png'/></div><div>\"+ Math.round(max_min_tempData[date].max)+\"°C/\"+ Math.round(max_min_tempData[date].min)+\"°C</div></div>\";\n");
      out.write("	            button.onclick = function () {\n");
      out.write("	                updateChart(date);\n");
      out.write("	                var a=max_min_tempData[date]\n");
      out.write("	                updatenowweather(date,max_min_tempData,nowday)\n");
      out.write("	                 // 버튼을 클릭하면 해당 날짜의 최고/최저 온도 및 날씨 확인\n");
      out.write("	            };\n");
      out.write("	            buttonContainer.appendChild(button);\n");
      out.write("	        }\n");
      out.write("	    }\n");
      out.write("\n");
      out.write("	    function nowweather(selectedDate,timeLabel,value,weatherlist){\n");
      out.write("\n");
      out.write("	        var nowday = new Date(selectedDate);\n");
      out.write("	        var days = ['일', '월', '화', '수', '목', '금', '토'];\n");
      out.write("	        var dayOfWeek = days[nowday.getDay()];\n");
      out.write("	        var tag=\"<div class='weatherimg' ><img src='/mini/images/weather/\"+weatherlist.weather[0].icon+\".png'/>\";\n");
      out.write("	        tag +=\"<span class='weatherdata'>\"+value+\"<span>°C</div>\";\n");
      out.write("	        tag +=\"<div class='weatherrain'><div class='nowdata'>강수확률:\"+weatherlist.pop+\"%</div><div class='nowdata'>습도:\"+weatherlist.main.humidity+\"%</div>\";\n");
      out.write("	        tag +=\"<div>풍속:\"+weatherlist.wind.speed+\"m/s</div></div>\";\n");
      out.write("	        tag +=\"<div class='daysweather'><div>날씨</div><div>\"+dayOfWeek+\"요일</div><div>\"+weatherlist.weather[0].description+\"</div>\"\n");
      out.write("	        $(\"#nowweather\").html(tag);\n");
      out.write("	    }\n");
      out.write("	    function updatenowweather(date,max_min_tempData){\n");
      out.write("	    	\n");
      out.write("	    	test=date+\" 00:00\";\n");
      out.write("			\n");
      out.write("	    	console.log(weather.list.length);\n");
      out.write("	    	console.log(\"값이 넘어와야한다\",max_min_tempData[date].icon);\n");
      out.write("	    	for(var i =0; i<weather.list.length;i++){\n");
      out.write("	    		if(test==weather.list[i].dt_txt.substring(0,16)){\n");
      out.write("	    		console.log(\"asdf\",date);\n");
      out.write("	    		var nowday = new Date(date);\n");
      out.write("	    		var days=['일', '월', '화', '수', '목', '금', '토'];\n");
      out.write("	    		var dayOfWeek = days[nowday.getDay()];\n");
      out.write("	    		//살았다..\n");
      out.write("	    		//여기는 오늘말고 다른날짜들 버튼 누를시 상단에 값나올곳\n");
      out.write("	    		\n");
      out.write("	    		var tag = \"<div class='weatherimg'><img src='/mini/images/weather/\"+max_min_tempData[date].icon+\".png'/>\";\n");
      out.write("	    		tag +=\"<span class='weatherdata'>\"+max_min_tempData[date].max+\"<span>°C</div>\";\n");
      out.write("	    		tag +=\"<div class='weatherrain'><div class='nowdata'>강수확률:\"+weather.list[i].pop+\"%</div><div class='nowdata'>습도:\"+weather.list[i].main.humidity+\"%</div>\";\n");
      out.write("	    		tag +=\"<div>풍속:\"+weather.list[i].wind.speed+\"m/s</div></div>\";\n");
      out.write("	    		tag +=\"<div class='daysweather'><div>날씨</div><div>\"+dayOfWeek+\"요일</div>\";\n");
      out.write("	    		if(max_min_tempData[date].icon=='09n'){\n");
      out.write("	    			tag	+=	\"<div>비</div>\";\n");
      out.write("	    		}else{\n");
      out.write("	    			tag+=\"<div>\"+weather.list[i].weather[0].description+\"</div>\";\n");
      out.write("	    		}\n");
      out.write("	    		\n");
      out.write("	    		 $(\"#nowweather\").html(tag);\n");
      out.write("	    		console.log(weather.list[i]);\n");
      out.write("	    	}else{\n");
      out.write("	    		//여기는 오늘날짜 현재시간에 가장 가까운 온도나오게 하기.\n");
      out.write("	    	}\n");
      out.write("	    	}\n");
      out.write("	    	\n");
      out.write("	    }\n");
      out.write("\n");
      out.write("</script>\n");

    // 세션에서 "cityName"이라는 이름으로 저장된 값을 가져옵니다.
    String cityName = (String)session.getAttribute("addrSelect");
	
    // 만약 세션에 값이 없을 경우 기본값을 설정할 수 있습니다.
    if (cityName == null) {
        cityName = "부산"; // "부산" 등 원하는 기본값 설정
    }

      out.write("\n");
      out.write("<div id=\"mainbody\">\n");
      out.write("   <div id=\"bannerImgBox\">\n");
      out.write("      <!--사용자위치구하기-->\n");
      out.write("      <div id=\"locationBox\">\n");
      out.write("           <h2 style=\"font-size: 35pt; color: white;\">당신을 위한,</h2>\n");
      out.write("           <h2 style=\"font-size: 45pt; font-weight: bold; margin-top: 20px; color: #d8ede7\" id=\"help\">");
      out.print(cityName );
      out.write("</h2>\n");
      out.write("           <button type=\"button\" class=\"btn btn-light\" onclick=\"busan()\" style=\"margin-top: 20px; font-size: 17pt;\">지역설정하기</button>\n");
      out.write("        </div> \n");
      out.write("   </div>\n");
      out.write("    <div id=\"test\"></div>\n");
      out.write("    <!-- 영현님이 만드신거 -->\n");
      out.write("      \n");
      out.write("   <!-- 영현님이 만드신거 -->\n");
      out.write("   <div class=\"contentAll\">\n");
      out.write("   <div style=\"width: 100%;height: 200px; text-align: center;display: flex; justify-content: center; align-items: center; gap: 10px;\">\n");
      out.write("         \n");
      out.write("            <form action=\"/mini/searchResult\" method=\"get\">\n");
      out.write("            <h4 style=\"margin-bottom: 20px;margin-top:60px;\">당신의 부산을 검색해보세요.</h4><br>\n");
      out.write("             <input type=\"text\" name=\"searchWord\" id= \"searchWord\" placeholder=\"  ex)해운대, 금정..\" required\n");
      out.write("             style=\"width: 300px; border-radius: 20px; height: 45px; border: 1px solid #444;\">\n");
      out.write("             <button type=\"submit\"  class=\"btn btn-outline-secondary\" style=\"flex-shrink: 0; margin-left: 20px;\">search</button>\n");
      out.write("         </form>\n");
      out.write("   </div>   \n");
      out.write("         <!--축제슬라이드(위치기반)-->\n");
      out.write("         <div id=\"contentTitle1\">\n");
      out.write("            <h2>✨지금 부산에 가면?<span style=\"font-size: 17pt;\">  (현재 진행중인 축제입니다)</span></h2>      \n");
      out.write("   </div>\n");
      out.write("   <div>\n");
      out.write("   ");

    List<FestivalVO> list = (List<FestivalVO>) session.getAttribute("list");
   List<RestVO> restlist=(List<RestVO>)session.getAttribute("restlist");

      out.write("\n");
      out.write("\n");
      out.write("<div id=\"autoplay\" class=\"autoplay\">\n");
      out.write("    ");

    if (list != null && !list.isEmpty()) {
        for (FestivalVO festival : list) {
    
      out.write("\n");
      out.write("            <div class=\"class2\">\n");
      out.write("                <a href=\"/mini/festival/festivalView/");
      out.print( festival.getNo() );
      out.write("\">\n");
      out.write("                    <img src=\"/mini/images/poster/");
      out.print( festival.getPoster() );
      out.write("\">\n");
      out.write("                    <div class='postername'>");
      out.print( festival.getTitle());
      out.write("</div>\n");
      out.write("                </a>\n");
      out.write("            </div>\n");
      out.write("    ");

        }
    } else {
    
      out.write("\n");
      out.write("            <div class=\"class2\"><a href=\"#\"><img src=\"./images/main/축제1.jpeg\"/></a></div>\n");
      out.write("            <div class=\"class2\"><a href=\"#\"><img src=\"./images/main/축제2.jpeg\"/></a></div>\n");
      out.write("            <div class=\"class2\"><a href=\"#\"><img src=\"./images/main/축제3.jpeg\"/></a></div>\n");
      out.write("            <div class=\"class2\"><a href=\"#\"><img src=\"./images/main/축제4.jpeg\"/></a></div>\n");
      out.write("            <div class=\"class2\"><a href=\"#\"><img src=\"./images/main/축제5.jpeg\"/></a></div>\n");
      out.write("            <div class=\"class2\"><a href=\"#\"><img src=\"./images/main/축제6.jpeg\"/></a></div>\n");
      out.write("    ");

    }
    
      out.write("\n");
      out.write("</div>\n");
      out.write("      </div>\n");
      out.write("      <!-- 맛집슬라이드(위치기반)-->\n");
      out.write("      <div id=\"contentTitle2\">\n");
      out.write("         <h2>👨‍🍳맛보고 즐기는 부산먹거리</h2>\n");
      out.write("      </div>\n");
      out.write("      <!-- 사용자 위치에 해당하는 구의 맛집 연결 -->\n");
      out.write("      <div>\n");
      out.write("         <div id=\"center\" class=\"center\">\n");
      out.write("          ");

    if (restlist != null && !restlist.isEmpty()) {
        for (RestVO rlist : restlist) {
    
      out.write("\n");
      out.write("        <div class=\"class3\">\n");
      out.write("           <a href=\"/mini/rest/restView/");
      out.print( rlist.getRest_code() );
      out.write("\">\n");
      out.write("               <img src=\"/mini/images/Food/");
      out.print( rlist.getImageurl() );
      out.write("\">\n");
      out.write("               <div class=\"postername\">");
      out.print(rlist.getStore_name());
      out.write("</div>\n");
      out.write("            </a>\n");
      out.write("        </div>\n");
      out.write("    ");

        }
    } else {
    
      out.write("\n");
      out.write("          <div class=\"class3\"><a href=\"#\"><img src=\"./images/main/음식1.jpeg\"/></a></div>\n");
      out.write("            <div class=\"class3\"><a href=\"#\"><img src=\"./images/main/음식2.jpeg\"/></a></div>\n");
      out.write("            <div class=\"class3\"><a href=\"#\"><img src=\"./images/main/음식3.jpeg\"/></a></div>\n");
      out.write("            <div class=\"class3\"><a href=\"#\"><img src=\"./images/main/음식4.jpeg\"/></a></div>\n");
      out.write("            <div class=\"class3\"><a href=\"#\"><img src=\"./images/main/음식5.jpeg\"/></a></div>\n");
      out.write("            <div class=\"class3\"><a href=\"#\"><img src=\"./images/main/음식6.jpeg\"/></a></div>\n");
      out.write("    ");

    }
    
      out.write(" \n");
      out.write("         </div>\n");
      out.write("      </div>\n");
      out.write("      <!-- 현재 인기있는 축제, 행사(조회수순) -->\n");
      out.write("      <div id=\"contentTitle3\">\n");
      out.write("         <h2>💫지금 가장 인기있는 축제•행사<span style=\"font-size: 17pt;\">  (사용자들의 좋아요가 많은 순)</span></h2>\n");
      out.write("      </div>\n");
      out.write("      <div id=\"bgImg\">\n");
      out.write("         <div id=\"hitFestivalBox\">\n");
      out.write("         <!-- 축제랭킹\n");
      out.write("         \n");
      out.write("         \n");
      out.write("         \n");
      out.write("          -->\n");
      out.write("         </div>\n");
      out.write("      </div>\n");
      out.write("      <!-- 현재 인기있는 맛집(조회수순)-->\n");
      out.write("      <div id=\"contentTitle4\">\n");
      out.write("         <h2>❤️‍🔥지금 제일 핫한 맛집<span style=\"font-size: 17pt;\">  (사용자들의 좋아요가 많은 순)</span></h2>\n");
      out.write("      </div>\n");
      out.write("      <div id=\"bgImg2\">\n");
      out.write("         <div id=\"hitFoodBox\">\n");
      out.write("            <!-- 맛집랭킹 -->\n");
      out.write("         </div>\n");
      out.write("      </div>\n");
      out.write("      <div style=\" display:flex;\">\n");
      out.write("      <div id=\"marineIndex\" >\n");
      out.write("         <!-- 해양지수 \n");
      out.write("            09-04 오후3:10시작\n");
      out.write("         -->\n");
      out.write("         <div id=\"contentTitle5\">\n");
      out.write("            <h2>🏖️부산해양지수</h2><br>\n");
      out.write("            <h4 style=\"font-size: 18pt;\">오늘의 해양지수를 확인하고 해양레저활동을 할 때 고려하세요!</h4>\n");
      out.write("         </div>\n");
      out.write("         <div id=\"siteList\">\n");
      out.write("            <div>\n");
      out.write("               <img src=\"/mini/images/main/송정.png\"/>\n");
      out.write("               <h4>송정</h4>\n");
      out.write("               <div class='site' id=\"site1\"></div>\n");
      out.write("               <div id=\"water_temp1\"></div>\n");
      out.write("            </div>\n");
      out.write("            <div>\n");
      out.write("               <img src=\"/mini/images/main/부산남부.png\"/>\n");
      out.write("               <h4>부산남부</h4>\n");
      out.write("               <div class='site' id=\"site2\"></div>\n");
      out.write("               <div id=\"water_temp2\"></div>\n");
      out.write("            </div>\n");
      out.write("            <div>\n");
      out.write("               <img src=\"/mini/images/main/부산서부.png\"/>\n");
      out.write("               <h4>부산서부</h4>\n");
      out.write("               <div class='site' id=\"site3\"></div>\n");
      out.write("               <div id=\"water_temp3\"></div>\n");
      out.write("            </div>   \n");
      out.write("            <div>\n");
      out.write("               <img src=\"/mini/images/main/부산동부.png\"/>\n");
      out.write("               <h4>부산동부</h4>\n");
      out.write("               <div class='site' id=\"site4\"></div>\n");
      out.write("               <div id=\"water_temp4\"></div>\n");
      out.write("            </div>\n");
      out.write("        </div>    \n");
      out.write("      </div>\n");
      out.write("      <div id=\"busanweather\" style=\"margin-left: 50px;\">\n");
      out.write("         <!-- 부산기온 -->\n");
      out.write("          <div id=\"contentTitle6\">\n");
      out.write("            <h2>🌤️부산현재날씨</h2>\n");
      out.write("          </div>\n");
      out.write("          <div>\n");
      out.write("                <div id=\"nowweather\"> </div>\n");
      out.write("             <!-- 차트가 표시될 영역 -->\n");
      out.write("             <div>\n");
      out.write("                 <canvas id=\"myChart\" style=\"width:100%; height:300px;\"></canvas>\n");
      out.write("             </div>\n");
      out.write("         \n");
      out.write("             <!-- 날짜 버튼이 표시될 영역 -->\n");
      out.write("             <div id=\"buttonContainer\" >\n");
      out.write("                 <!-- 날짜별 버튼이 여기에 추가됨 -->\n");
      out.write("             </div>\n");
      out.write("          </div>\n");
      out.write("      </div>\n");
      out.write("      </div>\n");
      out.write("   </div>\n");
      out.write("</div>   ");
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/mini/css/footer.css\" type=\"text/css\"/>\r\n");

    Boolean excludeFooter = (Boolean) request.getAttribute("excludeFooter");
    if (excludeFooter == null || !excludeFooter) {

      out.write("\r\n");
      out.write("  \r\n");
      out.write("\r\n");
      out.write("   <footer>\r\n");
      out.write("      <div class=\"inner\">\r\n");
      out.write("        <div class=\"footer-message\">부산의 축제와 맛집을 소개하는 웹사이트</div>\r\n");
      out.write("        <div class=\"footer-contact\">컨택: ict@google.com</div>\r\n");
      out.write("        <div class=\"footer-copyright\">Copyright 2024 All ⓒ rights reserved</div>\r\n");
      out.write("      </div>\r\n");
      out.write("    </footer>\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>\r\n");

    }

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fif_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f0 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f0_reused = false;
    try {
      _jspx_th_c_005fif_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f0.setParent(null);
      // /layout/header.jspf(157,15) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${logStatus != 'Y'}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f0 = _jspx_th_c_005fif_005f0.doStartTag();
      if (_jspx_eval_c_005fif_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("                   <li class=\"lo\"><a onclick=\"openLoginPopup()\"><img src=\"/mini/images/main/unjoin.png\" style=\"width:60px; height:60px;\"/></a></li>\r\n");
          out.write("               ");
          int evalDoAfterBody = _jspx_th_c_005fif_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f0);
      _jspx_th_c_005fif_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fif_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f1 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f1_reused = false;
    try {
      _jspx_th_c_005fif_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f1.setParent(null);
      // /layout/header.jspf(160,15) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f1.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${logStatus == 'Y'}", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f1 = _jspx_th_c_005fif_005f1.doStartTag();
      if (_jspx_eval_c_005fif_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("                   <li class=\"lo\"><a href=\"/mini/mypage/mypage\"><img src=\"/mini/images/main/join.png\" style=\"width:60px; height:60px;\"/></a></li>\r\n");
          out.write("               ");
          int evalDoAfterBody = _jspx_th_c_005fif_005f1.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f1);
      _jspx_th_c_005fif_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f1_reused);
    }
    return false;
  }
}
